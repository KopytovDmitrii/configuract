{"version":3,"file":"js-framework.es.js","sources":["../src/core/validator.ts","../src/core/renderer.ts","../src/core/reactive.ts","../src/core/component-registry.ts","../src/core/scheduler.ts","../src/core/directives.ts","../src/core/component-renderer.ts","../src/core/computed.ts","../src/core/plugin-system.ts","../src/core/performance.ts","../src/core/dom-differ.ts","../src/utils/helpers.ts","../src/index.ts"],"sourcesContent":["import { ElementConfig, ValidationResult, ValidationError, ElementProps, EventHandlers } from './types';\n\n/**\n * Класс для валидации конфигурации элементов\n */\nexport class ConfigValidator {\n  private validHtmlTags: Set<string>;\n  private usedIds: Set<string>;\n\n  constructor() {\n    // Основные HTML теги, поддерживаемые фреймворком\n    this.validHtmlTags = new Set([\n      'div', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n      'button', 'input', 'form', 'label', 'textarea', 'select', 'option',\n      'a', 'img', 'ul', 'ol', 'li', 'table', 'tr', 'td', 'th',\n      'header', 'footer', 'main', 'section', 'article', 'nav',\n      'strong', 'em', 'small', 'br', 'hr'\n    ]);\n    this.usedIds = new Set();\n  }\n\n  /**\n   * Сбросить состояние валидатора (список использованных ID)\n   */\n  reset(): void {\n    this.usedIds.clear();\n  }\n\n  /**\n   * Валидация конфигурации элемента\n   */\n  validate(config: ElementConfig, path = ''): ValidationResult {\n    const errors: ValidationError[] = [];\n\n    // Валидация основной структуры\n    if (!config || typeof config !== 'object') {\n      errors.push({\n        field: 'config',\n        message: 'Конфигурация должна быть объектом',\n        path,\n      });\n      return { isValid: false, errors };\n    }\n\n    // Валидация тега\n    this.validateTag(config, errors, path);\n\n    // Валидация свойств\n    if (config.props) {\n      this.validateProps(config.props, errors, path);\n    }\n\n    // Валидация дочерних элементов\n    if (config.children) {\n      this.validateChildren(config.children, errors, path);\n    }\n\n    // Валидация событий\n    if (config.events) {\n      this.validateEvents(config.events, errors, path);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Валидация HTML тега или компонента\n   */\n  private validateTag(config: ElementConfig, errors: ValidationError[], path: string): void {\n    // Для компонентов поле tag не требуется, проверяем наличие component\n    if (config.component) {\n      // Это компонент - валидируем имя компонента\n      if (typeof config.component !== 'string') {\n        errors.push({\n          field: 'component',\n          message: 'Имя компонента должно быть строкой',\n          path,\n        });\n      }\n      return; // Для компонентов не требуется tag\n    }\n    \n    // Для обычных элементов требуется tag\n    if (!config.tag) {\n      errors.push({\n        field: 'tag',\n        message: 'Поле tag является обязательным для элементов (или укажите component для компонентов)',\n        path,\n      });\n      return;\n    }\n\n    if (typeof config.tag !== 'string') {\n      errors.push({\n        field: 'tag',\n        message: 'Поле tag должно быть строкой',\n        path,\n      });\n      return;\n    }\n\n    if (!this.validHtmlTags.has(config.tag.toLowerCase())) {\n      errors.push({\n        field: 'tag',\n        message: `Неподдерживаемый HTML тег: ${config.tag}`,\n        path,\n      });\n    }\n  }\n\n  /**\n   * Валидация свойств элемента\n   */\n  private validateProps(props: ElementProps, errors: ValidationError[], path: string): void {\n    if (typeof props !== 'object' || props === null) {\n      errors.push({\n        field: 'props',\n        message: 'Свойства должны быть объектом',\n        path,\n      });\n      return;\n    }\n\n    // Валидация класса\n    if (props.class !== undefined) {\n      if (typeof props.class !== 'string') {\n        errors.push({\n          field: 'props.class',\n          message: 'Класс должен быть строкой',\n          path,\n        });\n      }\n    }\n\n    // Валидация ID\n    if (props.id !== undefined) {\n      if (typeof props.id !== 'string') {\n        errors.push({\n          field: 'props.id',\n          message: 'ID должен быть строкой',\n          path,\n        });\n      } else {\n        // Проверка на уникальность ID\n        if (this.usedIds.has(props.id)) {\n          errors.push({\n            field: 'props.id',\n            message: `Дублирующийся ID: ${props.id}`,\n            path,\n          });\n        } else {\n          this.usedIds.add(props.id);\n        }\n      }\n    }\n\n    // Валидация стилей\n    if (props.style !== undefined) {\n      if (typeof props.style !== 'object' || props.style === null) {\n        errors.push({\n          field: 'props.style',\n          message: 'Стили должны быть объектом',\n          path,\n        });\n      } else {\n        this.validateStyles(props.style, errors, path);\n      }\n    }\n  }\n\n  /**\n   * Валидация CSS стилей\n   */\n  private validateStyles(style: any, errors: ValidationError[], path: string): void {\n    for (const [property, value] of Object.entries(style)) {\n      if (typeof value !== 'string' && typeof value !== 'number') {\n        errors.push({\n          field: `props.style.${property}`,\n          message: `Значение стиля должно быть строкой или числом, получено: ${typeof value}`,\n          path,\n        });\n      }\n    }\n  }\n\n  /**\n   * Валидация дочерних элементов\n   */\n  private validateChildren(children: any, errors: ValidationError[], path: string): void {\n    if (!Array.isArray(children)) {\n      errors.push({\n        field: 'children',\n        message: 'Дочерние элементы должны быть массивом',\n        path,\n      });\n      return;\n    }\n\n    children.forEach((child, index) => {\n      const childPath = path ? `${path}.children[${index}]` : `children[${index}]`;\n\n      if (typeof child === 'string') {\n        // Текстовый узел - валидация не требуется\n        return;\n      }\n\n      if (typeof child === 'object' && child !== null) {\n        // Рекурсивная валидация дочернего элемента\n        const childResult = this.validate(child, childPath);\n        errors.push(...childResult.errors);\n      } else {\n        errors.push({\n          field: 'children',\n          message: `Дочерний элемент должен быть строкой или объектом конфигурации, получено: ${typeof child}`,\n          path: childPath,\n        });\n      }\n    });\n  }\n\n  /**\n   * Валидация обработчиков событий\n   */\n  private validateEvents(events: EventHandlers, errors: ValidationError[], path: string): void {\n    if (typeof events !== 'object' || events === null) {\n      errors.push({\n        field: 'events',\n        message: 'События должны быть объектом',\n        path,\n      });\n      return;\n    }\n\n    for (const [eventType, handler] of Object.entries(events)) {\n      if (typeof handler !== 'function') {\n        errors.push({\n          field: `events.${eventType}`,\n          message: `Обработчик события должен быть функцией, получено: ${typeof handler}`,\n          path,\n        });\n      }\n\n      // Проверка на валидные типы событий DOM\n      if (!this.isValidEventType(eventType)) {\n        errors.push({\n          field: `events.${eventType}`,\n          message: `Неподдерживаемый тип события: ${eventType}`,\n          path,\n        });\n      }\n    }\n  }\n\n  /**\n   * Проверка валидности типа события DOM\n   */\n  private isValidEventType(eventType: string): boolean {\n    const validDOMEvents = [\n      'click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout',\n      'mousemove', 'mouseenter', 'mouseleave',\n      'keydown', 'keyup', 'keypress',\n      'focus', 'blur', 'change', 'input', 'submit', 'reset',\n      'load', 'unload', 'resize', 'scroll',\n      'touchstart', 'touchend', 'touchmove', 'touchcancel'\n    ];\n    \n    // Кастомные события фреймворка\n    const customFrameworkEvents = [\n      'mounted', 'unmounted'\n    ];\n    \n    return validDOMEvents.includes(eventType) || customFrameworkEvents.includes(eventType);\n  }\n\n  /**\n   * Получить список поддерживаемых HTML тегов\n   */\n  getSupportedTags(): string[] {\n    return Array.from(this.validHtmlTags);\n  }\n\n  /**\n   * Добавить поддержку нового HTML тега\n   */\n  addSupportedTag(tag: string): void {\n    this.validHtmlTags.add(tag.toLowerCase());\n  }\n\n  /**\n   * Удалить поддержку HTML тега\n   */\n  removeSupportedTag(tag: string): void {\n    this.validHtmlTags.delete(tag.toLowerCase());\n  }\n}","import { \n  ElementConfig, \n  ElementProps, \n  StyleProperties, \n  EventHandlers, \n  EventListenerRecord, \n  RenderContext,\n  RendererOptions,\n  RenderStats\n} from './types';\n\n/**\n * Класс для рендеринга HTML элементов из конфигурации\n */\nexport class HTMLRenderer {\n  private eventListeners: Map<HTMLElement, EventListenerRecord[]>;\n  private options: RendererOptions;\n  private stats: RenderStats;\n\n  constructor(options: RendererOptions = {}) {\n    this.eventListeners = new Map();\n    this.options = {\n      enableValidation: true,\n      enableLogging: false,\n      ...options\n    };\n    this.stats = {\n      elementsCreated: 0,\n      eventsAttached: 0,\n      renderTime: 0\n    };\n  }\n\n  /**\n   * Основной метод рендеринга\n   */\n  render(config: ElementConfig, container: HTMLElement): HTMLElement {\n    const startTime = performance.now();\n    \n    try {\n      const element = this.createElement(config);\n      container.appendChild(element);\n      \n      this.stats.renderTime = performance.now() - startTime;\n      \n      if (this.options.enableLogging) {\n        console.log(`Рендеринг завершен за ${this.stats.renderTime.toFixed(2)}мс`);\n      }\n      \n      return element;\n    } catch (error) {\n      console.error('Ошибка рендеринга:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание DOM элемента из конфигурации\n   */\n  private createElement(config: ElementConfig): HTMLElement {\n    // Создание HTML элемента\n    const tag = config.tag || 'div';\n    const element = document.createElement(tag);\n    this.stats.elementsCreated++;\n\n    // Применение свойств\n    if (config.props) {\n      this.applyProps(element, config.props);\n    }\n\n    // Привязка событий\n    if (config.events) {\n      this.attachEvents(element, config.events);\n    }\n\n    // Рендеринг дочерних элементов\n    if (config.children) {\n      this.renderChildren(element, config.children);\n    }\n\n    return element;\n  }\n\n  /**\n   * Применение свойств к DOM элементу\n   */\n  private applyProps(element: HTMLElement, props: ElementProps): void {\n    for (const [key, value] of Object.entries(props)) {\n      switch (key) {\n        case 'class':\n          element.className = value as string;\n          break;\n        case 'id':\n          element.id = value as string;\n          break;\n        case 'style':\n          this.applyStyles(element, value as StyleProperties);\n          break;\n        default:\n          // Применение обычных HTML атрибутов\n          if (value !== undefined && value !== null) {\n            element.setAttribute(key, String(value));\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Применение CSS стилей к элементу\n   */\n  private applyStyles(element: HTMLElement, styles: StyleProperties): void {\n    for (const [property, value] of Object.entries(styles)) {\n      if (value !== undefined && value !== null) {\n        // Преобразование camelCase в kebab-case для CSS свойств\n        const cssProperty = property.replace(/([A-Z])/g, '-$1').toLowerCase();\n        element.style.setProperty(cssProperty, String(value));\n      }\n    }\n  }\n\n  /**\n   * Привязка обработчиков событий к элементу\n   */\n  private attachEvents(element: HTMLElement, events: EventHandlers): void {\n    const listeners: EventListenerRecord[] = [];\n\n    for (const [eventType, handler] of Object.entries(events)) {\n      if (!handler) continue; // Пропускаем undefined обработчики\n      \n      // Обрабатываем кастомные события фреймворка\n      if (eventType === 'mounted' || eventType === 'unmounted') {\n        // Кастомные события не добавляются как DOM listeners\n        continue;\n      }\n      \n      const listenerRecord: EventListenerRecord = {\n        type: eventType,\n        handler: handler as (event: Event) => void,\n        element\n      };\n\n      element.addEventListener(eventType, handler as EventListener);\n      listeners.push(listenerRecord);\n      this.stats.eventsAttached++;\n    }\n\n    if (listeners.length > 0) {\n      this.eventListeners.set(element, listeners);\n    }\n  }\n\n  /**\n   * Рендеринг дочерних элементов\n   */\n  private renderChildren(parent: HTMLElement, children: any[]): void {\n    children.forEach(child => {\n      if (typeof child === 'string') {\n        // Текстовый узел\n        const textNode = document.createTextNode(child);\n        parent.appendChild(textNode);\n      } else if (child && typeof child === 'object' && child.tag) {\n        // Вложенный элемент\n        const childElement = this.createElement(child);\n        parent.appendChild(childElement);\n      } else {\n        console.warn('Некорректный дочерний элемент:', child);\n      }\n    });\n  }\n\n  /**\n   * Размонтирование элемента с очисткой ресурсов\n   */\n  unmount(element: HTMLElement): void {\n    // Очистка обработчиков событий\n    this.cleanupEventListeners(element);\n\n    // Рекурсивная очистка дочерних элементов\n    const children = Array.from(element.children);\n    children.forEach(child => {\n      if (child instanceof HTMLElement) {\n        this.unmount(child);\n      }\n    });\n\n    // Удаление из DOM\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /**\n   * Очистка обработчиков событий для элемента\n   */\n  private cleanupEventListeners(element: HTMLElement): void {\n    const listeners = this.eventListeners.get(element);\n    if (listeners) {\n      listeners.forEach(({ type, handler }) => {\n        element.removeEventListener(type, handler);\n      });\n      this.eventListeners.delete(element);\n    }\n  }\n\n  /**\n   * Обновление элемента новой конфигурацией\n   */\n  update(element: HTMLElement, newConfig: ElementConfig): HTMLElement {\n    // Простое обновление - полная замена\n    const parent = element.parentNode;\n    if (!parent) {\n      throw new Error('Элемент не имеет родителя для обновления');\n    }\n\n    // Создание нового элемента\n    const newElement = this.createElement(newConfig);\n\n    // Замена в DOM\n    parent.replaceChild(newElement, element);\n\n    // Очистка старого элемента\n    this.unmount(element);\n\n    return newElement;\n  }\n\n  /**\n   * Получение статистики рендеринга\n   */\n  getStats(): RenderStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Сброс статистики рендеринга\n   */\n  resetStats(): void {\n    this.stats = {\n      elementsCreated: 0,\n      eventsAttached: 0,\n      renderTime: 0\n    };\n  }\n\n  /**\n   * Получение количества привязанных обработчиков событий\n   */\n  getEventListenersCount(): number {\n    let count = 0;\n    this.eventListeners.forEach(listeners => {\n      count += listeners.length;\n    });\n    return count;\n  }\n\n  /**\n   * Создание контекста рендеринга\n   */\n  createRenderContext(element: HTMLElement, config: ElementConfig, parent?: RenderContext): RenderContext {\n    return {\n      element,\n      config,\n      ...(parent && { parentContext: parent })\n    };\n  }\n\n  /**\n   * Поиск элемента по ID в рендереном дереве\n   */\n  findElementById(root: HTMLElement, id: string): HTMLElement | null {\n    if (root.id === id) {\n      return root;\n    }\n\n    for (const child of Array.from(root.children)) {\n      if (child instanceof HTMLElement) {\n        const found = this.findElementById(child, id);\n        if (found) {\n          return found;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Поиск элементов по классу в рендереном дереве\n   */\n  findElementsByClass(root: HTMLElement, className: string): HTMLElement[] {\n    const result: HTMLElement[] = [];\n\n    if (root.classList.contains(className)) {\n      result.push(root);\n    }\n\n    for (const child of Array.from(root.children)) {\n      if (child instanceof HTMLElement) {\n        result.push(...this.findElementsByClass(child, className));\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Очистка всех ресурсов рендерера\n   */\n  cleanup(): void {\n    // Очистка всех обработчиков событий\n    this.eventListeners.forEach((listeners, element) => {\n      listeners.forEach(({ type, handler }) => {\n        element.removeEventListener(type, handler);\n      });\n    });\n\n    this.eventListeners.clear();\n    this.resetStats();\n  }\n}","import { \n  ReactiveEffect, \n  ReactiveProperty, \n  ReactiveOptions,\n  EffectOptions,\n  DebuggerEvent \n} from './types';\n\n/**\n * Активный эффект в данный момент\n */\nlet activeEffect: ReactiveEffect | undefined;\n\n/**\n * Стек активных эффектов\n */\nconst effectStack: ReactiveEffect[] = [];\n\n/**\n * WeakMap для отслеживания реактивных объектов\n */\nconst targetMap = new WeakMap<object, Map<string | symbol, ReactiveProperty>>();\n\n/**\n * WeakMap для хранения оригинальных объектов\n */\nconst reactiveMap = new WeakMap<object, object>();\nconst originalMap = new WeakMap<object, object>();\n\n/**\n * Создание реактивного Proxy объекта\n */\nexport function createReactive<T extends object>(\n  target: T, \n  options: ReactiveOptions = {}\n): T {\n  // Проверяем, не является ли объект уже реактивным\n  if (reactiveMap.has(target)) {\n    return reactiveMap.get(target) as T;\n  }\n\n  // Создаем Proxy\n  const proxy = new Proxy(target, {\n    get(obj: T, prop: string | symbol, receiver: any): any {\n      // Отслеживание доступа к свойству\n      track(target, prop);\n      \n      const value = Reflect.get(obj, prop, receiver);\n      \n      // Рекурсивная реактивность для вложенных объектов\n      if (options.deep !== false && typeof value === 'object' && value !== null) {\n        return createReactive(value, options);\n      }\n      \n      // Отладочная информация\n      if (options.debuggerOptions?.onTrack) {\n        options.debuggerOptions.onTrack({\n          type: 'get',\n          target: obj,\n          key: prop,\n          newValue: value\n        });\n      }\n      \n      return value;\n    },\n    \n    set(obj: T, prop: string | symbol, value: any, receiver: any): boolean {\n      const oldValue = (obj as any)[prop];\n      const hadKey = Object.prototype.hasOwnProperty.call(obj, prop);\n      const result = Reflect.set(obj, prop, value, receiver);\n      \n      // Уведомление об изменении только если значение действительно изменилось\n      if (!hadKey) {\n        // Новое свойство\n        trigger(target, prop, 'add', value, oldValue);\n      } else if (oldValue !== value) {\n        // Изменение существующего свойства\n        trigger(target, prop, 'set', value, oldValue);\n      }\n      \n      // Отладочная информация\n      if (options.debuggerOptions?.onTrigger) {\n        options.debuggerOptions.onTrigger({\n          type: hadKey ? 'set' : 'add',\n          target: obj,\n          key: prop,\n          newValue: value,\n          oldValue\n        });\n      }\n      \n      return result;\n    },\n    \n    deleteProperty(obj: T, prop: string | symbol): boolean {\n      const hadKey = Object.prototype.hasOwnProperty.call(obj, prop);\n      const oldValue = (obj as any)[prop];\n      const result = Reflect.deleteProperty(obj, prop);\n      \n      if (result && hadKey) {\n        trigger(target, prop, 'delete', undefined, oldValue);\n        \n        // Отладочная информация\n        if (options.debuggerOptions?.onTrigger) {\n          options.debuggerOptions.onTrigger({\n            type: 'delete',\n            target: obj,\n            key: prop,\n            oldValue\n          });\n        }\n      }\n      \n      return result;\n    }\n  });\n  \n  // Сохраняем связь между оригиналом и прокси\n  reactiveMap.set(target, proxy);\n  originalMap.set(proxy, target);\n  \n  return proxy;\n}\n\n/**\n * Отслеживание доступа к свойству\n */\nfunction track(target: object, key: string | symbol): void {\n  if (!activeEffect || !shouldTrack) {\n    return;\n  }\n  \n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n    targetMap.set(target, (depsMap = new Map()));\n  }\n  \n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, (dep = { key: String(key), effects: new Set() }));\n  }\n  \n  // Добавляем текущий эффект к наблюдателям\n  dep.effects.add(activeEffect);\n  activeEffect.deps.add(dep);\n}\n\n/**\n * Уведомление об изменении свойства\n */\nfunction trigger(\n  target: object, \n  key: string | symbol, \n  type: 'set' | 'add' | 'delete' | 'clear',\n  newValue?: any,\n  oldValue?: any\n): void {\n  const depsMap = targetMap.get(target);\n  if (!depsMap) {\n    return;\n  }\n  \n  const effects = new Set<ReactiveEffect>();\n  \n  // Собираем все эффекты для данного ключа\n  const dep = depsMap.get(key);\n  if (dep) {\n    dep.effects.forEach(effect => {\n      if (effect !== activeEffect) {\n        effects.add(effect);\n      }\n    });\n  }\n  \n  // Для операций с массивами также триггерим length\n  if (type === 'add' || type === 'delete') {\n    if (Array.isArray(target)) {\n      const lengthDep = depsMap.get('length');\n      if (lengthDep) {\n        lengthDep.effects.forEach(effect => {\n          if (effect !== activeEffect) {\n            effects.add(effect);\n          }\n        });\n      }\n    }\n  }\n  \n  // Запускаем все собранные эффекты\n  effects.forEach(effect => {\n    if (effect.options?.scheduler) {\n      effect.options.scheduler(effect);\n    } else {\n      effect.fn();\n    }\n  });\n}\n\n/**\n * Флаг разрешения отслеживания\n */\nlet shouldTrack = true;\n\n/**\n * Приостановка отслеживания\n */\nexport function pauseTracking(): void {\n  shouldTrack = false;\n}\n\n/**\n * Возобновление отслеживания\n */\nexport function enableTracking(): void {\n  shouldTrack = true;\n}\n\n/**\n * Создание реактивного эффекта\n */\nexport function effect(\n  fn: Function, \n  options: EffectOptions = {}\n): ReactiveEffect {\n  const effectFn: ReactiveEffect = {\n    fn,\n    active: true,\n    deps: new Set(),\n    options\n  };\n  \n  if (!options.lazy) {\n    runEffect(effectFn);\n  }\n  \n  return effectFn;\n}\n\n/**\n * Запуск реактивного эффекта\n */\nfunction runEffect(effect: ReactiveEffect): any {\n  if (!effect.active) {\n    return effect.fn();\n  }\n  \n  // Очищаем старые зависимости\n  cleanupEffect(effect);\n  \n  try {\n    // Устанавливаем активный эффект\n    effectStack.push(effect);\n    activeEffect = effect;\n    \n    return effect.fn();\n  } finally {\n    // Восстанавливаем предыдущий активный эффект\n    effectStack.pop();\n    activeEffect = effectStack[effectStack.length - 1];\n  }\n}\n\n/**\n * Очистка зависимостей эффекта\n */\nfunction cleanupEffect(effect: ReactiveEffect): void {\n  effect.deps.forEach(dep => {\n    dep.effects.delete(effect);\n  });\n  effect.deps.clear();\n}\n\n/**\n * Остановка реактивного эффекта\n */\nexport function stop(effect: ReactiveEffect): void {\n  if (effect.active) {\n    cleanupEffect(effect);\n    effect.active = false;\n  }\n}\n\n/**\n * Проверка, является ли объект реактивным\n */\nexport function isReactive(value: any): boolean {\n  return originalMap.has(value);\n}\n\n/**\n * Получение оригинального объекта из реактивного\n */\nexport function toRaw<T>(observed: T): T {\n  const original = originalMap.get(observed as any);\n  return original ? original as T : observed;\n}\n\n/**\n * Создание shallow реактивного объекта (только первый уровень)\n */\nexport function shallowReactive<T extends object>(target: T): T {\n  return createReactive(target, { deep: false });\n}\n\n/**\n * Проверка, изменилось ли значение\n */\nexport function hasChanged(value: any, oldValue: any): boolean {\n  return !Object.is(value, oldValue);\n}\n\n// Экспортируем типы для совместимости\nexport type { ReactiveEffect, EffectOptions } from './types';","import { Component, ComponentInstance, PropDefinition } from './types';\nimport { createReactive } from './reactive';\n\n/**\n * Реестр компонентов фреймворка\n */\nclass ComponentRegistry {\n  private components = new Map<string, Component>();\n  private instances = new Map<string, ComponentInstance>();\n  private instanceCounter = 0;\n\n  /**\n   * Регистрация компонента\n   */\n  register(component: Component): void {\n    if (!component.name) {\n      throw new Error('Компонент должен иметь имя');\n    }\n\n    if (this.components.has(component.name)) {\n      console.warn(`Компонент \"${component.name}\" уже зарегистрирован. Перезаписываем.`);\n    }\n\n    // Валидация компонента\n    this.validateComponent(component);\n\n    this.components.set(component.name, component);\n  }\n\n  /**\n   * Получение компонента по имени\n   */\n  get(name: string): Component | undefined {\n    return this.components.get(name);\n  }\n\n  /**\n   * Проверка существования компонента\n   */\n  has(name: string): boolean {\n    return this.components.has(name);\n  }\n\n  /**\n   * Удаление компонента из реестра\n   */\n  unregister(name: string): boolean {\n    // Проверяем, нет ли активных экземпляров\n    const activeInstances = Array.from(this.instances.values())\n      .filter(instance => instance.component.name === name && instance.mounted);\n\n    if (activeInstances.length > 0) {\n      console.warn(\n        `Попытка удаления компонента \"${name}\" с ${activeInstances.length} активными экземплярами`\n      );\n      return false;\n    }\n\n    return this.components.delete(name);\n  }\n\n  /**\n   * Создание экземпляра компонента с полной поддержкой жизненного цикла\n   */\n  createInstance(componentName: string, props: any = {}): ComponentInstance {\n    const component = this.get(componentName);\n    if (!component) {\n      throw new Error(`Компонент \"${componentName}\" не найден`);\n    }\n\n    // Генерируем уникальный ID\n    const id = this.generateInstanceId();\n\n    // Валидируем и обрабатываем props\n    const validatedProps = this.validateAndNormalizeProps(props, component.props);\n\n    // Вызываем хук beforeCreate\n    try {\n      component.beforeCreate?.();\n    } catch (error) {\n      console.error(`Ошибка в хуке beforeCreate компонента \"${componentName}\":`, error);\n    }\n\n    // Создаем локальное состояние\n    const localState = component.state ? component.state() : {};\n    const reactiveState = createReactive(localState);\n\n    // Создаем computed свойства\n    const computedProperties: Record<string, any> = {};\n    if (component.computed) {\n      for (const [key, getter] of Object.entries(component.computed)) {\n        try {\n          // Создаем простую реализацию computed для прямого вызова\n          Object.defineProperty(computedProperties, key, {\n            get() {\n              return getter.call({ \n                state: reactiveState, \n                props: validatedProps,\n                computed: computedProperties\n              });\n            },\n            enumerable: true,\n            configurable: true\n          });\n        } catch (error) {\n          console.warn(`Ошибка при создании computed свойства \"${key}\":`, error);\n          computedProperties[key] = undefined;\n        }\n      }\n    }\n\n    // Создаем экземпляр\n    const instance: ComponentInstance = {\n      id,\n      component,\n      props: validatedProps,\n      state: reactiveState,\n      computed: computedProperties,\n      element: null,\n      mounted: false,\n      dependencies: new Set(),\n      children: [],\n      parent: null,\n      pluginContext: {},\n      cleanup: []\n    };\n\n    // Сохраняем экземпляр\n    this.instances.set(id, instance);\n\n    // Вызываем хук created\n    try {\n      component.created?.call(instance);\n    } catch (error) {\n      console.error(`Ошибка в хуке created компонента \"${componentName}\":`, error);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Получение экземпляра по ID\n   */\n  getInstance(id: string): ComponentInstance | undefined {\n    return this.instances.get(id);\n  }\n\n  /**\n   * Удаление экземпляра\n   */\n  destroyInstance(id: string): boolean {\n    const instance = this.instances.get(id);\n    if (!instance) {\n      return false;\n    }\n\n    // Размонтируем если смонтирован\n    if (instance.mounted && instance.element) {\n      this.unmountInstance(instance);\n    }\n\n    // Вызываем хук destroyed\n    try {\n      instance.component.destroyed?.call(instance);\n    } catch (error) {\n      console.error(`Ошибка в хуке destroyed компонента \"${instance.component.name}\":`, error);\n    }\n\n    // Очищаем ссылки\n    instance.dependencies.clear();\n    instance.children.forEach(child => {\n      child.parent = null;\n    });\n\n    return this.instances.delete(id);\n  }\n\n  /**\n   * Монтирование экземпляра с полным жизненным циклом\n   */\n  mountInstance(instance: ComponentInstance, element: HTMLElement): void {\n    if (instance.mounted) {\n      console.warn(`Экземпляр ${instance.id} уже смонтирован`);\n      return;\n    }\n\n    // Вызываем хук beforeMount\n    try {\n      instance.component.beforeMount?.call(instance);\n    } catch (error) {\n      console.error(`Ошибка в хуке beforeMount компонента \"${instance.component.name}\":`, error);\n    }\n\n    instance.element = element;\n    instance.mounted = true;\n\n    // Вызываем хук mounted\n    try {\n      instance.component.mounted?.call(instance);\n    } catch (error) {\n      console.error(`Ошибка в хуке mounted компонента \"${instance.component.name}\":`, error);\n    }\n  }\n\n  /**\n   * Размонтирование экземпляра с вызовом хуков\n   */\n  unmountInstance(instance: ComponentInstance): void {\n    if (!instance.mounted) {\n      return;\n    }\n\n    // Вызываем хук beforeDestroy\n    try {\n      instance.component.beforeDestroy?.call(instance);\n    } catch (error) {\n      console.error(`Ошибка в хуке beforeDestroy компонента \"${instance.component.name}\":`, error);\n    }\n\n    // Размонтируем дочерние компоненты\n    instance.children.forEach(child => {\n      this.unmountInstance(child);\n    });\n\n    // Очищаем ресурсы\n    instance.cleanup.forEach(cleanupFn => {\n      try {\n        cleanupFn();\n      } catch (error) {\n        console.error('Ошибка при очистке ресурсов:', error);\n      }\n    });\n\n    instance.element = null;\n    instance.mounted = false;\n\n    // Вызываем хук destroyed\n    try {\n      instance.component.destroyed?.call(instance);\n    } catch (error) {\n      console.error(`Ошибка в хуке destroyed компонента \"${instance.component.name}\":`, error);\n    }\n  }\n\n  /**\n   * Обновление props экземпляра с хуками жизненного цикла\n   */\n  updateInstanceProps(instance: ComponentInstance, newProps: any): void {\n    const component = instance.component;\n    const validatedProps = this.validateAndNormalizeProps(newProps, component.props);\n    \n    // Определяем изменившиеся props\n    const changedProps: string[] = [];\n    for (const key in validatedProps) {\n      if (instance.props[key] !== validatedProps[key]) {\n        changedProps.push(key);\n      }\n    }\n\n    if (changedProps.length === 0) {\n      return; // Ничего не изменилось\n    }\n\n    // Вызываем хук beforeUpdate\n    try {\n      component.beforeUpdate?.call(instance, changedProps, []);\n    } catch (error) {\n      console.error(`Ошибка в хуке beforeUpdate компонента \"${component.name}\":`, error);\n    }\n\n    // Обновляем props\n    instance.props = validatedProps;\n\n    // Вызываем хук updated\n    try {\n      component.updated?.call(instance, changedProps, []);\n    } catch (error) {\n      console.error(`Ошибка в хуке updated компонента \"${component.name}\":`, error);\n    }\n  }\n\n  /**\n   * Получение всех экземпляров компонента\n   */\n  getInstancesByComponent(componentName: string): ComponentInstance[] {\n    return Array.from(this.instances.values())\n      .filter(instance => instance.component.name === componentName);\n  }\n\n  /**\n   * Получение всех смонтированных экземпляров\n   */\n  getMountedInstances(): ComponentInstance[] {\n    return Array.from(this.instances.values())\n      .filter(instance => instance.mounted);\n  }\n\n  /**\n   * Очистка всех экземпляров\n   */\n  clearInstances(): void {\n    // Размонтируем все экземпляры\n    Array.from(this.instances.values()).forEach(instance => {\n      this.destroyInstance(instance.id);\n    });\n  }\n\n  /**\n   * Очистка всего реестра\n   */\n  clear(): void {\n    this.clearInstances();\n    this.components.clear();\n  }\n\n  /**\n   * Получение списка всех зарегистрированных компонентов\n   */\n  getRegisteredComponents(): string[] {\n    return Array.from(this.components.keys());\n  }\n\n  /**\n   * Получение статистики\n   */\n  getStats() {\n    const mountedCount = this.getMountedInstances().length;\n    return {\n      registeredComponents: this.components.size,\n      totalInstances: this.instances.size,\n      mountedInstances: mountedCount,\n      unmountedInstances: this.instances.size - mountedCount\n    };\n  }\n\n  /**\n   * Валидация определения компонента\n   */\n  private validateComponent(component: Component): void {\n    if (typeof component.render !== 'function') {\n      throw new Error(`Компонент \"${component.name}\" должен иметь функцию render`);\n    }\n\n    if (component.props) {\n      for (const [propName, propDef] of Object.entries(component.props)) {\n        if (!this.isValidPropDefinition(propDef)) {\n          throw new Error(\n            `Некорректное определение свойства \"${propName}\" в компоненте \"${component.name}\"`\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Проверка корректности определения свойства\n   */\n  private isValidPropDefinition(propDef: PropDefinition): boolean {\n    const validTypes = ['string', 'number', 'boolean', 'object', 'array', 'function'];\n    return validTypes.includes(propDef.type);\n  }\n\n  /**\n   * Валидация и нормализация props\n   */\n  private validateAndNormalizeProps(props: any, propDefinitions?: any): any {\n    if (!propDefinitions) {\n      return props || {};\n    }\n\n    const result: any = {};\n\n    // Обрабатываем каждое определение свойства\n    for (const [propName, propDef] of Object.entries(propDefinitions as Record<string, PropDefinition>)) {\n      const value = props[propName];\n\n      // Проверяем обязательные свойства\n      if (propDef.required && (value === undefined || value === null)) {\n        throw new Error(`Обязательное свойство \"${propName}\" не передано`);\n      }\n\n      // Используем значение по умолчанию\n      if (value === undefined) {\n        result[propName] = propDef.default;\n        continue;\n      }\n\n      // Валидация типа\n      if (!this.validatePropType(value, propDef.type)) {\n        throw new Error(\n          `Свойство \"${propName}\" должно быть типа ${propDef.type}, получено ${typeof value}`\n        );\n      }\n\n      // Кастомная валидация\n      if (propDef.validator && !propDef.validator(value)) {\n        throw new Error(`Свойство \"${propName}\" не прошло кастомную валидацию`);\n      }\n\n      result[propName] = value;\n    }\n\n    return result;\n  }\n\n  /**\n   * Валидация типа свойства\n   */\n  private validatePropType(value: any, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'number':\n        return typeof value === 'number' && !isNaN(value);\n      case 'boolean':\n        return typeof value === 'boolean';\n      case 'function':\n        return typeof value === 'function';\n      case 'object':\n        return value !== null && typeof value === 'object' && !Array.isArray(value);\n      case 'array':\n        return Array.isArray(value);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Генерация уникального ID для экземпляра\n   */\n  private generateInstanceId(): string {\n    return `component_${++this.instanceCounter}_${Date.now()}`;\n  }\n}\n\n/**\n * Глобальный экземпляр реестра компонентов\n */\nexport const componentRegistry = new ComponentRegistry();\n\n/**\n * Удобные функции для работы с реестром\n */\n\n/**\n * Регистрация компонента\n */\nexport function registerComponent(component: Component): void {\n  componentRegistry.register(component);\n}\n\n/**\n * Получение компонента\n */\nexport function getComponent(name: string): Component | undefined {\n  return componentRegistry.get(name);\n}\n\n/**\n * Создание экземпляра компонента\n */\nexport function createComponentInstance(name: string, props?: any): ComponentInstance {\n  return componentRegistry.createInstance(name, props);\n}","import { ReactiveEffect } from './types';\n\n/**\n * Очередь обновлений для предотвращения избыточных рендеров\n */\nclass UpdateScheduler {\n  private updateQueue = new Set<Function>();\n  private isFlushPending = false;\n  private isFlushActive = false;\n  private currentFlushPromise: Promise<void> | null = null;\n  \n  /**\n   * Планирование выполнения эффекта\n   */\n  schedule(effect: ReactiveEffect | Function): void {\n    const fn = typeof effect === 'function' ? effect : effect.fn;\n    \n    // Добавляем в очередь\n    this.updateQueue.add(fn);\n    \n    // Запускаем flush если еще не запущен\n    if (!this.isFlushPending && !this.isFlushActive) {\n      this.isFlushPending = true;\n      this.currentFlushPromise = this.scheduleFlush();\n    }\n  }\n  \n  /**\n   * Планирование обновления (алиас для schedule)\n   */\n  scheduleUpdate(fn: Function): void {\n    this.schedule(fn);\n  }\n  \n  /**\n   * Планирование выполнения flush через requestAnimationFrame\n   */\n  private scheduleFlush(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      requestAnimationFrame(() => {\n        this.flushUpdates();\n        resolve();\n      });\n    });\n  }\n  \n  /**\n   * Выполнение всех запланированных обновлений\n   */\n  private flushUpdates(): void {\n    if (this.isFlushActive) {\n      return;\n    }\n    \n    this.isFlushActive = true;\n    this.isFlushPending = false;\n    \n    try {\n      // Получаем копию очереди и очищаем оригинал\n      const effects = Array.from(this.updateQueue);\n      this.updateQueue.clear();\n      \n      // Выполняем все обновления в одном батче\n      for (const effect of effects) {\n        try {\n          effect();\n        } catch (error) {\n          console.error('Ошибка при выполнении запланированного эффекта:', error);\n          // Продолжаем выполнение остальных эффектов\n        }\n      }\n      \n      // Если во время выполнения появились новые эффекты, планируем следующий flush\n      if (this.updateQueue.size > 0 && !this.isFlushPending) {\n        this.isFlushPending = true;\n        this.currentFlushPromise = this.scheduleFlush();\n      }\n    } finally {\n      this.isFlushActive = false;\n      if (this.updateQueue.size === 0) {\n        this.currentFlushPromise = null;\n      }\n    }\n  }\n  \n  /**\n   * Ожидание завершения всех запланированных обновлений\n   */\n  async nextTick(): Promise<void> {\n    if (this.currentFlushPromise) {\n      await this.currentFlushPromise;\n    }\n    \n    // Если после ожидания снова появились задачи, ждем их тоже\n    if (this.currentFlushPromise) {\n      await this.nextTick();\n    }\n  }\n  \n  /**\n   * Немедленное выполнение всех запланированных обновлений\n   */\n  flushSync(): void {\n    if (this.updateQueue.size > 0) {\n      this.flushUpdates();\n    }\n  }\n  \n  /**\n   * Очистка планировщика\n   */\n  clear(): void {\n    this.updateQueue.clear();\n    this.isFlushPending = false;\n    this.isFlushActive = false;\n    this.currentFlushPromise = null;\n  }\n  \n  /**\n   * Получение размера очереди (для отладки)\n   */\n  getQueueSize(): number {\n    return this.updateQueue.size;\n  }\n  \n  /**\n   * Проверка активности планировщика\n   */\n  isActive(): boolean {\n    return this.isFlushActive || this.isFlushPending;\n  }\n}\n\n/**\n * Глобальный экземпляр планировщика\n */\nexport const scheduler = new UpdateScheduler();\n\n/**\n * Удобные функции для работы с планировщиком\n */\n\n/**\n * Планирование выполнения функции в следующем кадре\n */\nexport function nextTick(): Promise<void>;\nexport function nextTick(callback: () => void): void;\nexport function nextTick(callback?: () => void): Promise<void> | void {\n  if (callback) {\n    scheduler.nextTick().then(callback);\n  } else {\n    return scheduler.nextTick();\n  }\n}\n\n/**\n * Немедленное выполнение всех запланированных обновлений\n */\nexport function flushSync(): void {\n  scheduler.flushSync();\n}\n\n/**\n * Планирование выполнения функции\n */\nexport function scheduleUpdate(fn: Function): void {\n  scheduler.schedule(fn);\n}\n\n/**\n * Создание планировщика с приоритетами\n */\nexport class PriorityScheduler {\n  private highPriorityQueue: Function[] = [];\n  private normalPriorityQueue: Function[] = [];\n  private lowPriorityQueue: Function[] = [];\n  private isFlushPending = false;\n  \n  /**\n   * Планирование с приоритетом\n   */\n  schedule(fn: Function, priority: 'high' | 'normal' | 'low' = 'normal'): void {\n    switch (priority) {\n      case 'high':\n        this.highPriorityQueue.push(fn);\n        break;\n      case 'low':\n        this.lowPriorityQueue.push(fn);\n        break;\n      default:\n        this.normalPriorityQueue.push(fn);\n    }\n    \n    if (!this.isFlushPending) {\n      this.isFlushPending = true;\n      requestAnimationFrame(() => this.flush());\n    }\n  }\n  \n  /**\n   * Выполнение очередей по приоритету\n   */\n  private flush(): void {\n    this.isFlushPending = false;\n    \n    // Сначала выполняем высокий приоритет\n    this.executeQueue(this.highPriorityQueue);\n    \n    // Затем обычный приоритет  \n    this.executeQueue(this.normalPriorityQueue);\n    \n    // В конце низкий приоритет (с ограничением времени)\n    this.executeQueueWithTimeSlicing(this.lowPriorityQueue);\n  }\n  \n  /**\n   * Выполнение очереди\n   */\n  private executeQueue(queue: Function[]): void {\n    while (queue.length > 0) {\n      const fn = queue.shift()!;\n      try {\n        fn();\n      } catch (error) {\n        console.error('Ошибка при выполнении задачи:', error);\n      }\n    }\n  }\n  \n  /**\n   * Выполнение очереди с ограничением времени\n   */\n  private executeQueueWithTimeSlicing(queue: Function[]): void {\n    const startTime = performance.now();\n    const timeSlice = 5; // 5мс на выполнение низкоприоритетных задач\n    \n    while (queue.length > 0 && (performance.now() - startTime) < timeSlice) {\n      const fn = queue.shift()!;\n      try {\n        fn();\n      } catch (error) {\n        console.error('Ошибка при выполнении задачи:', error);\n      }\n    }\n    \n    // Если остались задачи, планируем их на следующий кадр\n    if (queue.length > 0 && !this.isFlushPending) {\n      this.isFlushPending = true;\n      requestAnimationFrame(() => this.flush());\n    }\n  }\n}","import { ElementConfig, ElementChild, DirectiveContext } from './types';\n\n/**\n * Базовый класс для директив\n */\nabstract class BaseDirective {\n  abstract name: string;\n  abstract process(config: ElementConfig, context: DirectiveContext): ElementConfig | ElementConfig[] | null;\n}\n\n/**\n * Директива условного рендеринга v-if\n */\nclass IfDirective extends BaseDirective {\n  name = 'if';\n\n  process(config: ElementConfig, context: DirectiveContext): ElementConfig | null {\n    if (!config.if) {\n      return config;\n    }\n\n    const condition = this.evaluateExpression(config.if, context);\n    \n    if (condition) {\n      // Удаляем директиву из конфига и возвращаем элемент\n      const { if: _, ...cleanConfig } = config;\n      return cleanConfig;\n    }\n\n    return null; // Элемент не рендерится\n  }\n\n  /**\n   * Безопасная оценка выражения\n   */\n  private evaluateExpression(expression: string, context: DirectiveContext): boolean {\n    try {\n      // Создаем функцию с доступом к state и props\n      const func = new Function('state', 'props', `\n        with(state) {\n          with(props) {\n            return ${expression};\n          }\n        }\n      `);\n      \n      return Boolean(func(context.state, context.props));\n    } catch (error) {\n      console.warn('Ошибка в выражении v-if:', expression, error);\n      return false;\n    }\n  }\n}\n\n/**\n * Директива рендеринга списков v-for\n */\nclass ForDirective extends BaseDirective {\n  name = 'for';\n\n  process(config: ElementConfig, context: DirectiveContext): ElementConfig[] {\n    console.log('ForDirective.process вызван с config:', config);\n    console.log('ForDirective.process context.state:', context.state);\n    console.log('ForDirective.process context.props:', context.props);\n    \n    if (!config.for || !config.template) {\n      console.log('ForDirective: нет config.for или config.template, возвращаем исходный config');\n      return [config];\n    }\n\n    const { items, itemName, indexName } = this.parseForExpression(config.for);\n    console.log('ForDirective: parsed expression - items:', items, 'itemName:', itemName);\n    \n    const itemsArray = this.evaluateExpression(items, context);\n    console.log('ForDirective: evaluated items array:', itemsArray);\n\n    if (!Array.isArray(itemsArray)) {\n      console.warn('v-for требует массив:', items, 'got:', itemsArray);\n      return [];\n    }\n\n    const result = itemsArray.map((item, index) => {\n      console.log(`ForDirective: обработка элемента ${index}:`, item);\n      \n      const itemContext: DirectiveContext = {\n        ...context,\n        state: {\n          ...context.state,\n          [itemName]: item,\n          ...(indexName ? { [indexName]: index } : { [`${itemName}Index`]: index })\n        }\n      };\n      \n      console.log('ForDirective: itemContext.state:', itemContext.state);\n\n      // Обрабатываем шаблон для каждого элемента\n      const processedTemplate = this.processTemplate(config.template!, itemContext);\n      console.log('ForDirective: processedTemplate:', processedTemplate);\n      \n      const keyValue = config.key \n        ? this.processKeyExpression(String(config.key), itemContext)\n        : index;\n      \n      console.log('ForDirective: key value:', keyValue);\n      \n      const resultItem = {\n        ...processedTemplate,\n        key: keyValue\n      };\n      \n      console.log('ForDirective: result item:', resultItem);\n      return resultItem;\n    });\n    \n    console.log('ForDirective: final result array:', result);\n    return result;\n  }\n\n  /**\n   * Парсинг выражения v-for\n   */\n  private parseForExpression(expression: string): { \n    items: string, \n    itemName: string, \n    indexName?: string \n  } {\n    // Поддерживаем синтаксис: \"item in items\" и \"(item, index) in items\"\n    const withParentheses = expression.match(/\\((\\w+),\\s*(\\w+)\\)\\s+in\\s+(.+)/);\n    if (withParentheses) {\n      return { \n        itemName: withParentheses[1], \n        indexName: withParentheses[2],\n        items: withParentheses[3] \n      };\n    }\n\n    const simple = expression.match(/(\\w+)\\s+in\\s+(.+)/);\n    if (simple) {\n      return { \n        itemName: simple[1], \n        items: simple[2] \n      };\n    }\n\n    throw new Error(`Неверный синтаксис v-for: \"${expression}\". Используйте: \"item in items\" или \"(item, index) in items\"`);\n  }\n\n  /**\n   * Обработка шаблона для элемента списка\n   */\n  private processTemplate(template: ElementConfig, context: DirectiveContext): ElementConfig {\n    // Глубокое клонирование с сохранением функций\n    const processedTemplate = this.deepCloneWithFunctions(template);\n    \n    // Обрабатываем содержимое (дочерние элементы)\n    if (processedTemplate.children) {\n      processedTemplate.children = processedTemplate.children.map((child: ElementChild) => {\n        if (typeof child === 'string') {\n          return this.interpolateString(child, context);\n        }\n        return this.processTemplate(child, context);\n      });\n    }\n\n    // Обрабатываем свойства\n    if (processedTemplate.props) {\n      Object.keys(processedTemplate.props).forEach(key => {\n        const value = processedTemplate.props[key];\n        if (typeof value === 'string') {\n          // Специальная обработка для интерполяции объектов\n          if (value.includes('{{') && value.includes('}}')) {\n            const interpolated = this.interpolateValue(value, context);\n            processedTemplate.props[key] = interpolated;\n          } else {\n            processedTemplate.props[key] = this.interpolateString(value, context);\n          }\n        }\n        // Функции остаются как есть\n      });\n    }\n\n    return processedTemplate;\n  }\n\n  /**\n   * Глубокое клонирование объекта с сохранением функций\n   */\n  private deepCloneWithFunctions(obj: any): any {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (typeof obj === 'function') {\n      return obj; // Возвращаем функцию как есть\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.deepCloneWithFunctions(item));\n    }\n\n    const cloned: any = {};\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        cloned[key] = this.deepCloneWithFunctions(obj[key]);\n      }\n    }\n\n    return cloned;\n  }\n\n  /**\n   * Интерполяция значений (включая объекты)\n   */\n  private interpolateValue(str: string, context: DirectiveContext): any {\n    // Проверяем, есть ли только одно выражение в строке\n    const singleExpressionMatch = str.match(/^\\{\\{(.+?)\\}\\}$/);\n    if (singleExpressionMatch) {\n      // Возвращаем значение как есть (объект, число, строка и т.д.)\n      try {\n        return this.evaluateExpression(singleExpressionMatch[1].trim(), context);\n      } catch (error) {\n        console.warn('Ошибка в интерполяции:', singleExpressionMatch[1], error);\n        return str;\n      }\n    }\n    // Если несколько выражений - используем строковую интерполяцию\n    return this.interpolateString(str, context);\n  }\n\n  /**\n   * Интерполяция строк с выражениями {{}}\n   */\n  private interpolateString(str: string, context: DirectiveContext): string {\n    return str.replace(/\\{\\{(.+?)\\}\\}/g, (match, expression) => {\n      try {\n        const result = this.evaluateExpression(expression.trim(), context);\n        return String(result);\n      } catch (error) {\n        console.warn('Ошибка в интерполяции:', expression, error);\n        return match;\n      }\n    });\n  }\n\n  /**\n   * Обработка выражения ключа (поддерживает интерполяцию и прямые выражения)\n   */\n  private processKeyExpression(keyExpression: string, context: DirectiveContext): any {\n    // Если выражение содержит интерполяцию {{}}, обрабатываем как строку\n    if (keyExpression.includes('{{') && keyExpression.includes('}}')) {\n      return this.interpolateString(keyExpression, context);\n    }\n    // Иначе обрабатываем как JavaScript выражение\n    return this.evaluateExpression(keyExpression, context);\n  }\n\n  /**\n   * Оценка выражения\n   */\n  private evaluateExpression(expression: string, context: DirectiveContext): any {\n    try {\n      const func = new Function('state', 'props', `\n        with(state) {\n          with(props) {\n            return ${expression};\n          }\n        }\n      `);\n      \n      return func(context.state, context.props);\n    } catch (error) {\n      console.warn('Ошибка в выражении v-for:', expression, error);\n      return null;\n    }\n  }\n}\n\n/**\n * Директива показа/скрытия элемента v-show\n */\nclass ShowDirective extends BaseDirective {\n  name = 'show';\n\n  process(config: ElementConfig, context: DirectiveContext): ElementConfig {\n    if (config.show === undefined) {\n      return config;\n    }\n\n    const shouldShow = typeof config.show === 'boolean' \n      ? config.show \n      : this.evaluateExpression(String(config.show), context);\n\n    // Модифицируем стили для показа/скрытия\n    const processedConfig = { ...config };\n    \n    if (!processedConfig.props) {\n      processedConfig.props = {};\n    }\n\n    if (!processedConfig.props.style) {\n      processedConfig.props.style = {};\n    }\n\n    if (typeof processedConfig.props.style === 'object') {\n      processedConfig.props.style.display = shouldShow ? '' : 'none';\n    }\n\n    // Удаляем директиву из конфига\n    const { show: _, ...cleanConfig } = processedConfig;\n    return cleanConfig;\n  }\n\n  private evaluateExpression(expression: string, context: DirectiveContext): boolean {\n    try {\n      const func = new Function('state', 'props', `\n        with(state) {\n          with(props) {\n            return ${expression};\n          }\n        }\n      `);\n      \n      return Boolean(func(context.state, context.props));\n    } catch (error) {\n      console.warn('Ошибка в выражении v-show:', expression, error);\n      return false;\n    }\n  }\n}\n\n/**\n * Директива двунаправленной привязки данных v-model\n * Поддерживает все основные типы форм: input, textarea, select\n */\nclass ModelDirective extends BaseDirective {\n  name = 'model';\n  private static modelBindings = new Map<HTMLElement, { path: string; context: DirectiveContext }>();\n\n  process(config: ElementConfig, context: DirectiveContext): ElementConfig {\n    if (!config.model) {\n      return config;\n    }\n\n    const processedConfig = { ...config };\n    \n    // Инициализируем props и events если их нет\n    if (!processedConfig.props) {\n      processedConfig.props = {};\n    }\n    if (!processedConfig.events) {\n      processedConfig.events = {};\n    }\n\n    // Определяем значение и обработчик в зависимости от типа элемента\n    const tag = config.tag?.toLowerCase();\n    \n    switch (tag) {\n      case 'input':\n        this.handleInputModel(processedConfig, context);\n        break;\n      case 'textarea':\n        this.handleTextareaModel(processedConfig, context);\n        break;\n      case 'select':\n        this.handleSelectModel(processedConfig, context);\n        break;\n      default:\n        console.warn(`v-model не поддерживается для элемента ${tag}`);\n    }\n\n    // Добавляем обработчик для отслеживания элемента после рендеринга\n    const originalMounted = processedConfig.events?.mounted;\n    processedConfig.events = processedConfig.events || {};\n    processedConfig.events.mounted = (element: HTMLElement) => {\n      // Сохраняем привязку для последующих обновлений\n      ModelDirective.modelBindings.set(element, {\n        path: config.model!,\n        context\n      });\n      \n      if (originalMounted) {\n        originalMounted(element);\n      }\n    };\n\n    // Удаляем директиву из конфига\n    const { model: _, ...cleanConfig } = processedConfig;\n    return cleanConfig;\n  }\n\n  /**\n   * Обработка v-model для input\n   */\n  private handleInputModel(config: ElementConfig, context: DirectiveContext): void {\n    const propertyPath = config.model!;\n    const currentValue = this.getPropertyValue(propertyPath, context);\n    const inputType = config.props?.type || 'text';\n\n    switch (inputType) {\n      case 'checkbox':\n        config.props!.checked = currentValue;\n        config.events!.change = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          this.setPropertyValue(propertyPath, target.checked, context);\n        };\n        break;\n      \n      case 'radio':\n        config.props!.checked = currentValue === config.props?.value;\n        config.events!.change = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          if (target.checked) {\n            this.setPropertyValue(propertyPath, target.value, context);\n          }\n        };\n        break;\n      \n      default:\n        config.props!.value = currentValue;\n        config.events!.input = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          this.setPropertyValue(propertyPath, target.value, context);\n        };\n    }\n  }\n\n  /**\n   * Обработка v-model для textarea\n   */\n  private handleTextareaModel(config: ElementConfig, context: DirectiveContext): void {\n    const propertyPath = config.model!;\n    const currentValue = this.getPropertyValue(propertyPath, context);\n\n    config.props!.value = currentValue;\n    config.events!.input = (event: Event) => {\n      const target = event.target as HTMLTextAreaElement;\n      this.setPropertyValue(propertyPath, target.value, context);\n    };\n  }\n\n  /**\n   * Обработка v-model для select\n   */\n  private handleSelectModel(config: ElementConfig, context: DirectiveContext): void {\n    const propertyPath = config.model!;\n    const currentValue = this.getPropertyValue(propertyPath, context);\n\n    config.props!.value = currentValue;\n    config.events!.change = (event: Event) => {\n      const target = event.target as HTMLSelectElement;\n      this.setPropertyValue(propertyPath, target.value, context);\n    };\n  }\n\n  /**\n   * Получение значения свойства по пути\n   */\n  private getPropertyValue(path: string, context: DirectiveContext): any {\n    try {\n      const func = new Function('state', 'props', `\n        with(state) {\n          with(props) {\n            return ${path};\n          }\n        }\n      `);\n      \n      return func(context.state, context.props);\n    } catch (error) {\n      console.warn('Ошибка при получении значения v-model:', path, error);\n      return '';\n    }\n  }\n\n  /**\n   * Установка значения свойства по пути с поддержкой реактивности\n   */\n  private setPropertyValue(path: string, value: any, context: DirectiveContext): void {\n    try {\n      // Поддерживаем различные пути: property, nested.property, array[0].property\n      const pathParts = this.parsePath(path);\n      let obj = context.state;\n      \n      // Навигируемся до последнего объекта\n      for (let i = 0; i < pathParts.length - 1; i++) {\n        const part = pathParts[i];\n        if (part.type === 'property') {\n          obj = obj[part.key];\n        } else if (part.type === 'index') {\n          obj = obj[part.key];\n        }\n      }\n      \n      // Устанавливаем значение\n      const lastPart = pathParts[pathParts.length - 1];\n      if (lastPart.type === 'property') {\n        obj[lastPart.key] = value;\n      } else if (lastPart.type === 'index') {\n        obj[lastPart.key] = value;\n      }\n      \n      // Запускаем обновление интерфейса через планировщик\n      this.triggerUpdate(context);\n      \n    } catch (error) {\n      console.warn('Ошибка при установке значения v-model:', path, error);\n    }\n  }\n  \n  /**\n   * Парсинг пути для поддержки сложных выражений\n   */\n  private parsePath(path: string): Array<{ type: 'property' | 'index'; key: string | number }> {\n    const parts: Array<{ type: 'property' | 'index'; key: string | number }> = [];\n    \n    // Упрощенный парсер для основных случаев\n    const segments = path.split('.');\n    \n    for (const segment of segments) {\n      const arrayMatch = segment.match(/^(\\w+)\\[(\\d+)\\]$/);\n      if (arrayMatch) {\n        parts.push({ type: 'property', key: arrayMatch[1] });\n        parts.push({ type: 'index', key: parseInt(arrayMatch[2]) });\n      } else {\n        parts.push({ type: 'property', key: segment });\n      }\n    }\n    \n    return parts;\n  }\n  \n  /**\n   * Запуск обновления через планировщик\n   */\n  private triggerUpdate(context: DirectiveContext): void {\n    // Импортируем планировщик динамически чтобы избежать циклических зависимостей\n    import('./scheduler').then(({ scheduler }) => {\n      scheduler.scheduleUpdate(() => {\n        // Обновление будет обработано планировщиком\n      });\n    }).catch(error => {\n      console.warn('Ошибка при запуске обновления:', error);\n    });\n  }\n  \n  /**\n   * Статический метод для обновления всех привязанных элементов\n   */\n  static updateBoundElements(): void {\n    for (const [element, binding] of ModelDirective.modelBindings) {\n      try {\n        const currentValue = new ModelDirective().getPropertyValue(binding.path, binding.context);\n        \n        if (element instanceof HTMLInputElement) {\n          if (element.type === 'checkbox' || element.type === 'radio') {\n            element.checked = element.type === 'checkbox' ? currentValue : (currentValue === element.value);\n          } else {\n            element.value = String(currentValue || '');\n          }\n        } else if (element instanceof HTMLTextAreaElement) {\n          element.value = String(currentValue || '');\n        } else if (element instanceof HTMLSelectElement) {\n          element.value = String(currentValue || '');\n        }\n      } catch (error) {\n        console.warn('Ошибка при обновлении привязанного элемента:', error);\n      }\n    }\n  }\n}\n\n/**\n * Менеджер директив\n */\nexport class DirectiveManager {\n  private directives = new Map<string, BaseDirective>();\n\n  constructor() {\n    // Регистрируем встроенные директивы\n    this.register(new IfDirective());\n    this.register(new ForDirective());\n    this.register(new ShowDirective());\n    this.register(new ModelDirective());\n  }\n\n  /**\n   * Регистрация новой директивы\n   */\n  register(directive: BaseDirective): void {\n    this.directives.set(directive.name, directive);\n  }\n\n  /**\n   * Обработка всех директив в конфигурации\n   */\n  processDirectives(config: ElementConfig, context: DirectiveContext): ElementConfig[] {\n    let results: ElementConfig[] = [config];\n\n    // Обрабатываем директивы в определенном порядке\n    const directiveOrder = ['if', 'for', 'show', 'model'];\n\n    for (const directiveName of directiveOrder) {\n      const directive = this.directives.get(directiveName);\n      if (!directive) continue;\n\n      const newResults: ElementConfig[] = [];\n\n      for (const configItem of results) {\n        const processed = directive.process(configItem, context);\n        \n        if (processed) {\n          if (Array.isArray(processed)) {\n            newResults.push(...processed);\n          } else {\n            newResults.push(processed);\n          }\n        }\n      }\n\n      results = newResults;\n    }\n\n    return results;\n  }\n\n  /**\n   * Проверка наличия директив в конфигурации\n   */\n  hasDirectives(config: ElementConfig): boolean {\n    return !!(config.if || config.for || config.show !== undefined || config.model);\n  }\n}\n\n/**\n * Глобальный экземпляр менеджера директив\n */\nexport const directiveManager = new DirectiveManager();\n\n// Экспорт отдельных директив для прямого использования\nexport { IfDirective, ForDirective, ShowDirective, ModelDirective };","import { \n  ElementConfig, \n  ElementProps, \n  EventHandlers, \n  ComponentInstance,\n  DirectiveContext,\n  RenderStats\n} from './types';\nimport { componentRegistry } from './component-registry';\nimport { effect } from './reactive';\nimport { scheduler } from './scheduler';\nimport { directiveManager } from './directives';\n\n/**\n * Расширенный рендерер с поддержкой компонентов и реактивности\n */\nexport class ComponentRenderer {\n  private mountedInstances = new Map<HTMLElement, ComponentInstance>();\n  private instanceElements = new Map<string, HTMLElement>();\n  private stats: RenderStats = {\n    elementsCreated: 0,\n    eventsAttached: 0,\n    renderTime: 0\n  };\n\n  /**\n   * Основной метод рендеринга\n   */\n  render(config: ElementConfig, container: HTMLElement): HTMLElement {\n    const startTime = performance.now();\n    \n    try {\n      // Очищаем контейнер\n      this.clearContainer(container);\n      \n      // Рендерим конфигурацию\n      const element = this.renderConfig(config);\n      container.appendChild(element);\n      \n      this.stats.renderTime = performance.now() - startTime;\n      return element;\n    } catch (error) {\n      console.error('Ошибка рендеринга:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Рендеринг конфигурации (элемент или компонент)\n   */\n  private renderConfig(config: ElementConfig, parentInstance?: ComponentInstance): HTMLElement {\n    // Проверяем, является ли это компонентом\n    if (config.component) {\n      return this.renderComponent(config, parentInstance);\n    } else {\n      return this.renderElement(config, parentInstance);\n    }\n  }\n\n  /**\n   * Рендеринг компонента\n   */\n  private renderComponent(config: ElementConfig, parentInstance?: ComponentInstance): HTMLElement {\n    const componentName = config.component!;\n    \n    // Создаем экземпляр компонента\n    const instance = componentRegistry.createInstance(componentName, config.props);\n    \n    // Устанавливаем родительскую связь\n    if (parentInstance) {\n      instance.parent = parentInstance;\n      parentInstance.children.push(instance);\n    }\n\n    // Создаем контекст для директив\n    const directiveContext: DirectiveContext = {\n      state: instance.state,\n      props: instance.props,\n      instance,\n      computed: instance.computed\n    };\n\n    // Создаем реактивный эффект для перерендеринга\n    effect(() => {\n      try {\n        // Получаем конфигурацию от компонента с computed свойствами\n        const componentConfig = instance.component.render.call(\n          instance,\n          instance.props, \n          instance.state, \n          instance.computed\n        );\n        \n        // Обрабатываем директивы\n        const processedConfigs = directiveManager.processDirectives(componentConfig, directiveContext);\n        console.log('ComponentRenderer: processedConfigs после директив:', processedConfigs);\n        \n        if (processedConfigs.length === 0) {\n          console.log('ComponentRenderer: компонент скрыт директивой');\n          // Компонент скрыт директивой\n          if (instance.element) {\n            this.unmountComponent(instance);\n          }\n          return;\n        }\n\n        console.log('ComponentRenderer: рендерим конфиг:', processedConfigs[0]);\n        // Рендерим первый результат (в большинстве случаев будет только один)\n        const newElement = this.renderElement(processedConfigs[0], instance);\n        \n        if (instance.element) {\n          // Обновляем существующий элемент\n          if (instance.element.parentNode) {\n            instance.element.parentNode.replaceChild(newElement, instance.element);\n          }\n          instance.element = newElement;\n        } else {\n          // Первый рендер\n          instance.element = newElement;\n          this.instanceElements.set(instance.id, newElement);\n          this.mountedInstances.set(newElement, instance);\n          \n          // Вызываем хук onMount\n          componentRegistry.mountInstance(instance, newElement);\n        }\n      } catch (error) {\n        console.error('Ошибка при рендеринге компонента:', error);\n      }\n    }, {\n      scheduler: (effect) => scheduler.schedule(effect)\n    });\n\n    // Возвращаем элемент (он будет создан в эффекте)\n    return instance.element || this.createPlaceholder();\n  }\n\n  /**\n   * Рендеринг обычного элемента\n   */\n  private renderElement(config: ElementConfig, parentInstance?: ComponentInstance): HTMLElement {\n    console.log('ComponentRenderer.renderElement вызван с config:', config);\n    \n    // Создаем контекст для директив\n    const directiveContext: DirectiveContext = {\n      state: parentInstance?.state || {},\n      props: parentInstance?.props || {},\n      instance: parentInstance || undefined,\n      computed: parentInstance?.computed || {}\n    };\n    \n    console.log('ComponentRenderer.renderElement directiveContext:', directiveContext);\n\n    // Обрабатываем директивы\n    const processedConfigs = directiveManager.processDirectives(config, directiveContext);\n    console.log('ComponentRenderer.renderElement processedConfigs:', processedConfigs);\n    \n    if (processedConfigs.length === 0) {\n      console.log('ComponentRenderer.renderElement: возвращаем placeholder');\n      return this.createPlaceholder();\n    }\n\n    // Для простоты берем первый результат\n    const processedConfig = processedConfigs[0];\n    console.log('ComponentRenderer.renderElement используем processedConfig:', processedConfig);\n    \n    // Создаем HTML элемент\n    const element = document.createElement(processedConfig.tag || 'div');\n    this.stats.elementsCreated++;\n\n    // Применяем свойства\n    if (processedConfig.props) {\n      this.applyProps(element, processedConfig.props);\n    }\n\n    // Привязываем события\n    if (processedConfig.events) {\n      this.attachEvents(element, processedConfig.events);\n    }\n\n    // Рендерим дочерние элементы\n    if (processedConfig.children) {\n      this.renderChildren(element, processedConfig.children, parentInstance);\n    }\n\n    return element;\n  }\n\n  /**\n   * Рендеринг дочерних элементов\n   */\n  private renderChildren(\n    parent: HTMLElement, \n    children: any[], \n    parentInstance?: ComponentInstance\n  ): void {\n    children.forEach((child, index) => {\n      console.log(`ComponentRenderer.renderChildren: обрабатываем дочерний элемент ${index}:`, child);\n      \n      if (typeof child === 'string') {\n        // Текстовый узел\n        const textNode = document.createTextNode(child);\n        parent.appendChild(textNode);\n      } else if (child && typeof child === 'object') {\n        // Проверяем, есть ли директивы в дочернем элементе\n        if (directiveManager.hasDirectives(child)) {\n          console.log('ComponentRenderer.renderChildren: элемент содержит директивы');\n          \n          // Создаем контекст для директив\n          const directiveContext: DirectiveContext = {\n            state: parentInstance?.state || {},\n            props: parentInstance?.props || {},\n            instance: parentInstance || undefined,\n            computed: parentInstance?.computed || {}\n          };\n          \n          // Обрабатываем директивы\n          const processedConfigs = directiveManager.processDirectives(child, directiveContext);\n          console.log('ComponentRenderer.renderChildren: processedConfigs:', processedConfigs);\n          \n          // Рендерим все результаты (важно для v-for)\n          processedConfigs.forEach(processedConfig => {\n            if (processedConfig) {\n              const childElement = this.renderConfig(processedConfig, parentInstance);\n              parent.appendChild(childElement);\n            }\n          });\n        } else {\n          // Обычный элемент или компонент без директив\n          const childElement = this.renderConfig(child, parentInstance);\n          parent.appendChild(childElement);\n        }\n      }\n    });\n  }\n\n  /**\n   * Применение свойств к элементу\n   */\n  private applyProps(element: HTMLElement, props: ElementProps): void {\n    for (const [key, value] of Object.entries(props)) {\n      switch (key) {\n        case 'class':\n          element.className = value as string;\n          break;\n        case 'id':\n          element.id = value as string;\n          break;\n        case 'style':\n          this.applyStyles(element, value as any);\n          break;\n        case 'checked':\n          // Для чекбоксов используем DOM-свойство, а не атрибут\n          if (element instanceof HTMLInputElement) {\n            element.checked = Boolean(value);\n          }\n          break;\n        case 'value':\n          // Для input элементов используем DOM-свойство\n          if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n            element.value = String(value || '');\n          }\n          break;\n        case 'selected':\n          // Для option элементов\n          if (element instanceof HTMLOptionElement) {\n            element.selected = Boolean(value);\n          }\n          break;\n        default:\n          if (value !== undefined && value !== null) {\n            element.setAttribute(key, String(value));\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Применение стилей\n   */\n  private applyStyles(element: HTMLElement, styles: any): void {\n    if (typeof styles === 'object') {\n      for (const [property, value] of Object.entries(styles)) {\n        if (value !== undefined && value !== null) {\n          const cssProperty = property.replace(/([A-Z])/g, '-$1').toLowerCase();\n          element.style.setProperty(cssProperty, String(value));\n        }\n      }\n    } else if (typeof styles === 'string') {\n      element.style.cssText = styles;\n    }\n  }\n\n  /**\n   * Привязка обработчиков событий\n   */\n  private attachEvents(element: HTMLElement, events: EventHandlers): void {\n    for (const [eventType, handler] of Object.entries(events)) {\n      if (!handler) continue; // Пропускаем undefined обработчики\n      \n      // Обрабатываем кастомные события\n      if (eventType === 'mounted' || eventType === 'unmounted') {\n        // Кастомные события - вызываем напрямую\n        if (eventType === 'mounted') {\n          (handler as (element: HTMLElement) => void)(element);\n        }\n        continue;\n      }\n      \n      element.addEventListener(eventType, handler as EventListener);\n      this.stats.eventsAttached++;\n    }\n  }\n\n  /**\n   * Размонтирование компонента\n   */\n  private unmountComponent(instance: ComponentInstance): void {\n    if (instance.element) {\n      // Удаляем элемент из DOM\n      if (instance.element.parentNode) {\n        instance.element.parentNode.removeChild(instance.element);\n      }\n\n      // Очищаем ссылки\n      this.mountedInstances.delete(instance.element);\n      this.instanceElements.delete(instance.id);\n      \n      // Размонтируем через реестр\n      componentRegistry.unmountInstance(instance);\n    }\n  }\n\n  /**\n   * Создание элемента-заглушки\n   */\n  private createPlaceholder(): HTMLElement {\n    const placeholder = document.createElement('span');\n    placeholder.style.display = 'none';\n    placeholder.setAttribute('data-placeholder', 'true');\n    return placeholder;\n  }\n\n  /**\n   * Очистка контейнера\n   */\n  private clearContainer(container: HTMLElement): void {\n    // Размонтируем все компоненты в контейнере\n    const instances = Array.from(this.mountedInstances.entries())\n      .filter(([element]) => container.contains(element))\n      .map(([, instance]) => instance);\n\n    instances.forEach(instance => {\n      componentRegistry.destroyInstance(instance.id);\n    });\n\n    // Очищаем содержимое\n    container.innerHTML = '';\n  }\n\n  /**\n   * Обновление существующего элемента новой конфигурацией\n   */\n  updateElement(element: HTMLElement, newConfig: ElementConfig): HTMLElement {\n    const instance = this.mountedInstances.get(element);\n    \n    if (instance) {\n      // Обновляем компонент\n      if (newConfig.props) {\n        componentRegistry.updateInstanceProps(instance, newConfig.props);\n      }\n      return instance.element || element;\n    } else {\n      // Обновляем обычный элемент\n      const newElement = this.renderConfig(newConfig);\n      if (element.parentNode) {\n        element.parentNode.replaceChild(newElement, element);\n      }\n      return newElement;\n    }\n  }\n\n  /**\n   * Размонтирование элемента\n   */\n  unmount(element: HTMLElement): void {\n    const instance = this.mountedInstances.get(element);\n    \n    if (instance) {\n      // Размонтируем компонент\n      componentRegistry.destroyInstance(instance.id);\n    } else {\n      // Удаляем обычный элемент\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    }\n  }\n\n  /**\n   * Поиск компонента по элементу\n   */\n  getComponentInstance(element: HTMLElement): ComponentInstance | undefined {\n    return this.mountedInstances.get(element);\n  }\n\n  /**\n   * Получение статистики\n   */\n  getStats(): RenderStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Очистка всех ресурсов\n   */\n  cleanup(): void {\n    // Размонтируем все компоненты\n    this.mountedInstances.forEach(instance => {\n      componentRegistry.destroyInstance(instance.id);\n    });\n\n    this.mountedInstances.clear();\n    this.instanceElements.clear();\n    \n    // Сбрасываем статистику\n    this.stats = {\n      elementsCreated: 0,\n      eventsAttached: 0,\n      renderTime: 0\n    };\n  }\n\n  /**\n   * Принудительное обновление всех компонентов\n   */\n  forceUpdate(): void {\n    scheduler.flushSync();\n  }\n\n  /**\n   * Поиск элемента по ID\n   */\n  findElementById(element: HTMLElement, id: string): HTMLElement | null {\n    return element.querySelector(`#${id}`);\n  }\n\n  /**\n   * Поиск элементов по классу\n   */\n  findElementsByClass(element: HTMLElement, className: string): HTMLElement[] {\n    return Array.from(element.querySelectorAll(`.${className}`));\n  }\n}","import { effect, stop, ReactiveEffect } from './reactive';\nimport { scheduler } from './scheduler';\nimport { EffectOptions } from './types';\n\n/**\n * Вспомогательная функция для запуска эффекта\n */\nfunction runEffect(effect: ReactiveEffect): any {\n  if (!effect.active) {\n    return effect.fn();\n  }\n  return effect.fn();\n}\n\n/**\n * Интерфейс для computed свойства\n */\nexport interface ComputedRef<T = any> {\n  readonly value: T;\n  readonly dirty: boolean;\n  readonly effect: ReactiveEffect;\n}\n\n/**\n * Опции для computed свойства\n */\nexport interface ComputedOptions {\n  /** Функция для получения значения */\n  get: () => any;\n  /** Функция для установки значения (опционально) */\n  set?: (value: any) => void;\n  /** Включить отладку */\n  debug?: boolean;\n}\n\n/**\n * Внутренняя реализация computed свойства\n */\nclass ComputedRefImpl<T> implements ComputedRef<T> {\n  private _value!: T;\n  private _dirty = true;\n  private _effect: ReactiveEffect;\n  private _setter?: (value: any) => void;\n\n  constructor(getter: () => T, setter?: (value: any) => void) {\n    this._setter = setter;\n    \n    // Создаем эффект который будет отслеживать зависимости\n    this._effect = effect(() => getter(), {\n      lazy: true,\n      scheduler: () => {\n        // Когда зависимости изменяются, помечаем как \"грязное\"\n        if (!this._dirty) {\n          this._dirty = true;\n          // Уведомляем о изменении computed свойства\n          this.triggerUpdate();\n        }\n      }\n    });\n  }\n\n  get value(): T {\n    // Если значение \"грязное\", пересчитываем его\n    if (this._dirty) {\n      this._value = runEffect(this._effect);\n      this._dirty = false;\n    }\n    return this._value;\n  }\n\n  set value(newValue: T) {\n    if (this._setter) {\n      this._setter(newValue);\n    } else {\n      console.warn('Computed свойство доступно только для чтения');\n    }\n  }\n\n  get dirty(): boolean {\n    return this._dirty;\n  }\n\n  get effect(): ReactiveEffect {\n    return this._effect;\n  }\n\n  /**\n   * Принудительное обновление computed свойства\n   */\n  invalidate(): void {\n    this._dirty = true;\n    this.triggerUpdate();\n  }\n\n  /**\n   * Уведомление об изменении computed свойства\n   */\n  private triggerUpdate(): void {\n    scheduler.scheduleUpdate(() => {\n      // Обновление будет обработано планировщиком\n    });\n  }\n\n  /**\n   * Остановка отслеживания зависимостей\n   */\n  stop(): void {\n    stop(this._effect);\n  }\n}\n\n/**\n * Создание computed свойства с функцией-геттером\n */\nexport function computed<T>(getter: () => T): ComputedRef<T>;\n\n/**\n * Создание computed свойства с геттером и сеттером\n */\nexport function computed<T>(options: ComputedOptions): ComputedRef<T>;\n\n/**\n * Реализация функции computed\n */\nexport function computed<T>(getterOrOptions: (() => T) | ComputedOptions): ComputedRef<T> {\n  let getter: () => T;\n  let setter: ((value: T) => void) | undefined;\n\n  if (typeof getterOrOptions === 'function') {\n    getter = getterOrOptions;\n  } else {\n    getter = getterOrOptions.get;\n    setter = getterOrOptions.set;\n  }\n\n  return new ComputedRefImpl(getter, setter);\n}\n\n/**\n * Проверка является ли объект computed свойством\n */\nexport function isComputedRef(r: any): r is ComputedRef {\n  return !!(r && r._effect && typeof r.value !== 'undefined');\n}\n\n/**\n * Менеджер для управления computed свойствами\n */\nexport class ComputedManager {\n  private computedRefs = new Set<ComputedRefImpl<any>>();\n\n  /**\n   * Регистрация computed свойства для управления\n   */\n  register(computedRef: ComputedRefImpl<any>): void {\n    this.computedRefs.add(computedRef);\n  }\n\n  /**\n   * Удаление computed свойства из управления\n   */\n  unregister(computedRef: ComputedRefImpl<any>): void {\n    this.computedRefs.delete(computedRef);\n    computedRef.stop();\n  }\n\n  /**\n   * Принудительная валидация всех computed свойств\n   */\n  invalidateAll(): void {\n    for (const computedRef of this.computedRefs) {\n      computedRef.invalidate();\n    }\n  }\n\n  /**\n   * Получение статистики computed свойств\n   */\n  getStats(): { total: number; dirty: number; clean: number } {\n    let dirty = 0;\n    let clean = 0;\n    \n    for (const computedRef of this.computedRefs) {\n      if (computedRef.dirty) {\n        dirty++;\n      } else {\n        clean++;\n      }\n    }\n\n    return {\n      total: this.computedRefs.size,\n      dirty,\n      clean\n    };\n  }\n\n  /**\n   * Очистка всех computed свойств\n   */\n  cleanup(): void {\n    for (const computedRef of this.computedRefs) {\n      computedRef.stop();\n    }\n    this.computedRefs.clear();\n  }\n}\n\n/**\n * Глобальный экземпляр менеджера computed свойств\n */\nexport const computedManager = new ComputedManager();\n\n/**\n * Хелпер для создания computed свойства внутри компонента\n */\nexport function useComputed<T>(getter: () => T, deps?: any[]): ComputedRef<T> {\n  const computedRef = computed(getter);\n  computedManager.register(computedRef as ComputedRefImpl<T>);\n  return computedRef;\n}\n\n/**\n * Хелпер для создания вычисляемого свойства с кешированием на основе зависимостей\n */\nexport function memo<T>(fn: () => T, deps: any[]): () => T {\n  let cachedValue: T;\n  let cachedDeps: any[] = [];\n  let isInitialized = false;\n\n  return () => {\n    const hasChanged = !isInitialized || deps.some((dep, index) => dep !== cachedDeps[index]);\n    \n    if (hasChanged) {\n      cachedValue = fn();\n      cachedDeps = [...deps];\n      isInitialized = true;\n    }\n    \n    return cachedValue;\n  };\n}\n\n/**\n * Создание computed свойства для компонента с автоматической очисткой\n */\nexport function createComponentComputed<T>(\n  getter: () => T,\n  onDestroy?: () => void\n): ComputedRef<T> & { destroy: () => void } {\n  const computedRef = computed(getter) as ComputedRefImpl<T>;\n  computedManager.register(computedRef);\n\n  return {\n    get value() { return computedRef.value; },\n    get dirty() { return computedRef.dirty; },\n    get effect() { return computedRef.effect; },\n    \n    destroy() {\n      computedManager.unregister(computedRef);\n      if (onDestroy) {\n        onDestroy();\n      }\n    }\n  };\n}","import { Plugin, PluginOptions, PluginContext, CustomDirective } from './types';\n\n/**\n * Менеджер плагинов для фреймворка\n */\nclass PluginManager {\n  private plugins = new Map<string, Plugin>();\n  private installedPlugins = new Set<string>();\n  private globalProperties = new Map<string, any>();\n  private customDirectives = new Map<string, CustomDirective>();\n  private frameworkInstance: any;\n\n  constructor(framework: any) {\n    this.frameworkInstance = framework;\n  }\n\n  /**\n   * Установка плагина\n   */\n  use(plugin: Plugin, options?: PluginOptions): this {\n    // Проверяем, не установлен ли уже плагин\n    if (this.installedPlugins.has(plugin.name)) {\n      console.warn(`Плагин \"${plugin.name}\" уже установлен`);\n      return this;\n    }\n\n    // Проверяем зависимости\n    if (plugin.dependencies) {\n      for (const dependency of plugin.dependencies) {\n        if (!this.installedPlugins.has(dependency)) {\n          throw new Error(`Плагин \"${plugin.name}\" требует зависимость \"${dependency}\"`);\n        }\n      }\n    }\n\n    // Создаем контекст для плагина\n    const context: PluginContext = {\n      framework: this.frameworkInstance,\n      options: options || {},\n      globalProperties: Object.fromEntries(this.globalProperties),\n      directives: this.customDirectives\n    };\n\n    try {\n      // Вызываем функцию установки плагина\n      plugin.install(this.frameworkInstance, context);\n      \n      // Регистрируем плагин как установленный\n      this.plugins.set(plugin.name, plugin);\n      this.installedPlugins.add(plugin.name);\n      \n      console.log(`Плагин \"${plugin.name}\" успешно установлен`);\n    } catch (error) {\n      console.error(`Ошибка при установке плагина \"${plugin.name}\":`, error);\n      throw error;\n    }\n\n    return this;\n  }\n\n  /**\n   * Удаление плагина (если это поддерживается)\n   */\n  uninstall(pluginName: string): boolean {\n    if (!this.installedPlugins.has(pluginName)) {\n      console.warn(`Плагин \"${pluginName}\" не установлен`);\n      return false;\n    }\n\n    const plugin = this.plugins.get(pluginName);\n    if (plugin && typeof (plugin as any).uninstall === 'function') {\n      try {\n        (plugin as any).uninstall(this.frameworkInstance);\n        this.plugins.delete(pluginName);\n        this.installedPlugins.delete(pluginName);\n        console.log(`Плагин \"${pluginName}\" удален`);\n        return true;\n      } catch (error) {\n        console.error(`Ошибка при удалении плагина \"${pluginName}\":`, error);\n        return false;\n      }\n    }\n\n    console.warn(`Плагин \"${pluginName}\" не поддерживает удаление`);\n    return false;\n  }\n\n  /**\n   * Проверка установки плагина\n   */\n  hasPlugin(pluginName: string): boolean {\n    return this.installedPlugins.has(pluginName);\n  }\n\n  /**\n   * Получение списка установленных плагинов\n   */\n  getInstalledPlugins(): string[] {\n    return Array.from(this.installedPlugins);\n  }\n\n  /**\n   * Добавление глобального свойства\n   */\n  addGlobalProperty(name: string, value: any): void {\n    this.globalProperties.set(name, value);\n  }\n\n  /**\n   * Получение глобального свойства\n   */\n  getGlobalProperty(name: string): any {\n    return this.globalProperties.get(name);\n  }\n\n  /**\n   * Регистрация пользовательской директивы\n   */\n  registerDirective(directive: CustomDirective): void {\n    if (this.customDirectives.has(directive.name)) {\n      console.warn(`Директива \"${directive.name}\" уже зарегистрирована`);\n      return;\n    }\n\n    this.customDirectives.set(directive.name, directive);\n    console.log(`Директива \"${directive.name}\" зарегистрирована`);\n  }\n\n  /**\n   * Получение пользовательской директивы\n   */\n  getDirective(name: string): CustomDirective | undefined {\n    return this.customDirectives.get(name);\n  }\n\n  /**\n   * Получение всех пользовательских директив\n   */\n  getAllDirectives(): Map<string, CustomDirective> {\n    return new Map(this.customDirectives);\n  }\n\n  /**\n   * Очистка всех плагинов и ресурсов\n   */\n  cleanup(): void {\n    // Попытаемся удалить все плагины\n    for (const pluginName of this.installedPlugins) {\n      this.uninstall(pluginName);\n    }\n\n    // Очищаем все коллекции\n    this.plugins.clear();\n    this.installedPlugins.clear();\n    this.globalProperties.clear();\n    this.customDirectives.clear();\n  }\n}\n\n/**\n * Хелпер для создания простого плагина\n */\nexport function definePlugin(options: {\n  name: string;\n  version?: string;\n  install: (framework: any, context: PluginContext) => void;\n  uninstall?: (framework: any) => void;\n  dependencies?: string[];\n}): Plugin {\n  return {\n    name: options.name,\n    version: options.version,\n    install: options.install,\n    dependencies: options.dependencies,\n    ...(options.uninstall && { uninstall: options.uninstall })\n  };\n}\n\n/**\n * Встроенные плагины для демонстрации\n */\n\n/**\n * Плагин для логирования жизненного цикла компонентов\n */\nconst LifecycleLoggerPlugin = definePlugin({\n  name: 'LifecycleLogger',\n  version: '1.0.0',\n  install(framework: any, context: PluginContext) {\n    // Добавляем глобальное свойство для включения/выключения логирования\n    context.globalProperties.set('$logLifecycle', context.options.enabled !== false);\n\n    // Расширяем фреймворк методом для логирования\n    framework.logLifecycle = (componentName: string, hook: string, data?: any) => {\n      if (context.globalProperties.get('$logLifecycle')) {\n        console.log(`[${componentName}] ${hook}`, data || '');\n      }\n    };\n  }\n});\n\n/**\n * Плагин для валидации форм\n */\nconst FormValidationPlugin = definePlugin({\n  name: 'FormValidation',\n  version: '1.0.0',\n  install(framework: any, context: PluginContext) {\n    // Регистрируем директиву для валидации\n    const validateDirective: CustomDirective = {\n      name: 'validate',\n      bind(el: HTMLElement, binding) {\n        el.addEventListener('blur', () => {\n          const validator = binding.value;\n          if (typeof validator === 'function') {\n            const isValid = validator((el as HTMLInputElement).value);\n            el.classList.toggle('invalid', !isValid);\n            el.classList.toggle('valid', isValid);\n          }\n        });\n      }\n    };\n\n    context.directives.set('validate', validateDirective);\n\n    // Добавляем глобальные валидаторы\n    framework.validators = {\n      required: (value: any) => !!value,\n      email: (value: string) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n      minLength: (min: number) => (value: string) => value.length >= min,\n      maxLength: (max: number) => (value: string) => value.length <= max,\n      pattern: (regex: RegExp) => (value: string) => regex.test(value)\n    };\n  }\n});\n\n/**\n * Плагин для интернационализации (i18n)\n */\nconst I18nPlugin = definePlugin({\n  name: 'I18n',\n  version: '1.0.0',\n  install(framework: any, context: PluginContext) {\n    const messages = context.options.messages || {};\n    let currentLocale = context.options.locale || 'ru';\n\n    // Добавляем глобальные методы для работы с переводами\n    framework.t = (key: string, params?: Record<string, any>) => {\n      const message = messages[currentLocale]?.[key] || key;\n      \n      if (params) {\n        return Object.keys(params).reduce((msg, paramKey) => {\n          return msg.replace(new RegExp(`{${paramKey}}`, 'g'), params[paramKey]);\n        }, message);\n      }\n      \n      return message;\n    };\n\n    framework.setLocale = (locale: string) => {\n      currentLocale = locale;\n    };\n\n    framework.getLocale = () => currentLocale;\n\n    // Регистрируем директиву для автоматического перевода текста\n    const i18nDirective: CustomDirective = {\n      name: 'i18n',\n      bind(el: HTMLElement, binding) {\n        const key = binding.value || el.textContent;\n        if (key) {\n          el.textContent = framework.t(key);\n        }\n      },\n      update(el: HTMLElement, binding) {\n        const key = binding.value || binding.expression;\n        if (key) {\n          el.textContent = framework.t(key);\n        }\n      }\n    };\n\n    context.directives.set('i18n', i18nDirective);\n  }\n});\n\n/**\n * Плагин для управления состоянием (простой store)\n */\nconst StorePlugin = definePlugin({\n  name: 'Store',\n  version: '1.0.0',\n  install(framework: any, context: PluginContext) {\n    const initialState = context.options.state || {};\n    const mutations = context.options.mutations || {};\n    const actions = context.options.actions || {};\n\n    // Создаем реактивное состояние\n    const state = framework.reactive(initialState);\n    \n    const store = {\n      state,\n      \n      commit(mutationName: string, payload?: any) {\n        const mutation = mutations[mutationName];\n        if (mutation) {\n          mutation(state, payload);\n        } else {\n          console.warn(`Мутация \"${mutationName}\" не найдена`);\n        }\n      },\n\n      dispatch(actionName: string, payload?: any) {\n        const action = actions[actionName];\n        if (action) {\n          return action({ state, commit: this.commit, dispatch: this.dispatch }, payload);\n        } else {\n          console.warn(`Действие \"${actionName}\" не найдено`);\n        }\n      }\n    };\n\n    // Добавляем store в глобальные свойства\n    framework.$store = store;\n    context.globalProperties.set('$store', store);\n  }\n});\n\n/**\n * Экспорт основного класса и встроенных плагинов\n */\nexport {\n  PluginManager,\n  LifecycleLoggerPlugin,\n  FormValidationPlugin,\n  I18nPlugin,\n  StorePlugin\n};","/**\n * Модуль оптимизации производительности JS фреймворка\n */\n\n/**\n * Кеш для мемоизированных функций\n */\nconst memoCache = new Map();\n\n/**\n * Мемоизация функций для улучшения производительности\n */\nexport function memoize<T extends (...args: any[]) => any>(fn: T, keyGenerator?: (...args: Parameters<T>) => string): T {\n  const cache = new Map();\n  \n  return ((...args: Parameters<T>) => {\n    const key = keyGenerator ? keyGenerator(...args) : JSON.stringify(args);\n    \n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    \n    const result = fn(...args);\n    cache.set(key, result);\n    \n    // Ограничиваем размер кеша\n    if (cache.size > 1000) {\n      const firstKey = cache.keys().next().value;\n      cache.delete(firstKey);\n    }\n    \n    return result;\n  }) as T;\n}\n\n/**\n * Debounce функция для ограничения частоты вызовов\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * Throttle функция для ограничения частоты вызовов\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n/**\n * Оптимизатор рендеринга компонентов\n */\nexport class ComponentOptimizer {\n  private static instance: ComponentOptimizer;\n  private renderCache = new Map<string, any>();\n  private performanceMetrics = new Map<string, number[]>();\n  \n  static getInstance(): ComponentOptimizer {\n    if (!ComponentOptimizer.instance) {\n      ComponentOptimizer.instance = new ComponentOptimizer();\n    }\n    return ComponentOptimizer.instance;\n  }\n  \n  /**\n   * Кеширование результатов рендеринга\n   */\n  cacheRender(componentId: string, props: any, result: any): void {\n    const key = this.generateCacheKey(componentId, props);\n    this.renderCache.set(key, {\n      result,\n      timestamp: Date.now()\n    });\n    \n    // Очистка старого кеша\n    this.cleanupCache();\n  }\n  \n  /**\n   * Получение кешированного результата\n   */\n  getCachedRender(componentId: string, props: any): any {\n    const key = this.generateCacheKey(componentId, props);\n    const cached = this.renderCache.get(key);\n    \n    if (cached && (Date.now() - cached.timestamp) < 5000) { // 5 секунд TTL\n      return cached.result;\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Измерение производительности рендеринга\n   */\n  measureRenderTime(componentName: string, renderFn: () => any): any {\n    const start = performance.now();\n    const result = renderFn();\n    const end = performance.now();\n    \n    this.recordMetric(componentName, end - start);\n    \n    return result;\n  }\n  \n  /**\n   * Получение метрик производительности\n   */\n  getMetrics(): Record<string, { avg: number; min: number; max: number; count: number }> {\n    const result: any = {};\n    \n    for (const [component, times] of this.performanceMetrics) {\n      result[component] = {\n        avg: times.reduce((a, b) => a + b, 0) / times.length,\n        min: Math.min(...times),\n        max: Math.max(...times),\n        count: times.length\n      };\n    }\n    \n    return result;\n  }\n  \n  private generateCacheKey(componentId: string, props: any): string {\n    return `${componentId}:${JSON.stringify(props)}`;\n  }\n  \n  private recordMetric(componentName: string, time: number): void {\n    if (!this.performanceMetrics.has(componentName)) {\n      this.performanceMetrics.set(componentName, []);\n    }\n    \n    const times = this.performanceMetrics.get(componentName)!;\n    times.push(time);\n    \n    // Ограничиваем количество записей\n    if (times.length > 100) {\n      times.shift();\n    }\n  }\n  \n  private cleanupCache(): void {\n    const now = Date.now();\n    for (const [key, cached] of this.renderCache) {\n      if (now - cached.timestamp > 10000) { // 10 секунд\n        this.renderCache.delete(key);\n      }\n    }\n  }\n}\n\n/**\n * Оптимизация DOM операций\n */\nexport class DOMOptimizer {\n  private static batchedUpdates: (() => void)[] = [];\n  private static isScheduled = false;\n  \n  /**\n   * Батчинг DOM обновлений\n   */\n  static batchUpdate(updateFn: () => void): void {\n    this.batchedUpdates.push(updateFn);\n    \n    if (!this.isScheduled) {\n      this.isScheduled = true;\n      requestAnimationFrame(() => {\n        this.flushUpdates();\n      });\n    }\n  }\n  \n  /**\n   * Выполнение всех накопленных обновлений\n   */\n  private static flushUpdates(): void {\n    const updates = [...this.batchedUpdates];\n    this.batchedUpdates.length = 0;\n    this.isScheduled = false;\n    \n    updates.forEach(update => {\n      try {\n        update();\n      } catch (error) {\n        console.error('Ошибка в батчированном обновлении:', error);\n      }\n    });\n  }\n  \n  /**\n   * Виртуализация списков для больших наборов данных\n   */\n  static createVirtualList(items: any[], itemHeight: number, containerHeight: number) {\n    const visibleCount = Math.ceil(containerHeight / itemHeight) + 2; // +2 для буфера\n    let scrollTop = 0;\n    \n    return {\n      getVisibleItems() {\n        const startIndex = Math.floor(scrollTop / itemHeight);\n        const endIndex = Math.min(startIndex + visibleCount, items.length);\n        \n        return {\n          items: items.slice(startIndex, endIndex),\n          startIndex,\n          endIndex,\n          totalHeight: items.length * itemHeight,\n          offsetY: startIndex * itemHeight\n        };\n      },\n      \n      updateScrollTop(newScrollTop: number) {\n        scrollTop = newScrollTop;\n      }\n    };\n  }\n}\n\n/**\n * Менеджер памяти для предотвращения утечек\n */\nexport class MemoryManager {\n  private static cleanupFunctions: (() => void)[] = [];\n  \n  /**\n   * Регистрация функции очистки\n   */\n  static registerCleanup(cleanupFn: () => void): void {\n    this.cleanupFunctions.push(cleanupFn);\n  }\n  \n  /**\n   * Выполнение всех функций очистки\n   */\n  static cleanup(): void {\n    this.cleanupFunctions.forEach(fn => {\n      try {\n        fn();\n      } catch (error) {\n        console.error('Ошибка при очистке памяти:', error);\n      }\n    });\n    this.cleanupFunctions.length = 0;\n  }\n  \n  /**\n   * Мониторинг использования памяти\n   */\n  static getMemoryUsage(): any {\n    if ('memory' in performance) {\n      return (performance as any).memory;\n    }\n    return null;\n  }\n  \n  /**\n   * Принудительная сборка мусора (если доступна)\n   */\n  static forceGC(): void {\n    if ('gc' in window) {\n      (window as any).gc();\n    }\n  }\n}\n\n/**\n * Анализатор производительности\n */\nexport class PerformanceAnalyzer {\n  private static metrics = new Map<string, number[]>();\n  \n  /**\n   * Измерение времени выполнения\n   */\n  static measure<T>(name: string, fn: () => T): T {\n    const start = performance.now();\n    const result = fn();\n    const end = performance.now();\n    \n    this.recordTime(name, end - start);\n    \n    return result;\n  }\n  \n  /**\n   * Запись времени выполнения\n   */\n  static recordTime(name: string, time: number): void {\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    \n    const times = this.metrics.get(name)!;\n    times.push(time);\n    \n    // Ограничиваем размер массива\n    if (times.length > 1000) {\n      times.shift();\n    }\n  }\n  \n  /**\n   * Получение отчета о производительности\n   */\n  static getReport(): Record<string, any> {\n    const report: any = {};\n    \n    for (const [name, times] of this.metrics) {\n      const sorted = [...times].sort((a, b) => a - b);\n      \n      report[name] = {\n        count: times.length,\n        min: sorted[0],\n        max: sorted[sorted.length - 1],\n        avg: times.reduce((sum, time) => sum + time, 0) / times.length,\n        median: sorted[Math.floor(sorted.length / 2)],\n        p95: sorted[Math.floor(sorted.length * 0.95)],\n        p99: sorted[Math.floor(sorted.length * 0.99)]\n      };\n    }\n    \n    return report;\n  }\n  \n  /**\n   * Очистка метрик\n   */\n  static clearMetrics(): void {\n    this.metrics.clear();\n  }\n}\n\n/**\n * Экспорт всех оптимизаций\n */\nexport default {\n  memoize,\n  debounce,\n  throttle,\n  ComponentOptimizer,\n  DOMOptimizer,\n  MemoryManager,\n  PerformanceAnalyzer\n};","import { ElementConfig, ElementChild, DOMPatch, DiffResult, PatchType } from './types';\n\n/**\n * Алгоритм сравнения конфигураций и создания патчей для DOM\n */\nexport class DOMDiffer {\n  /**\n   * Сравнение двух конфигураций элементов\n   */\n  diff(oldConfig: ElementConfig, newConfig: ElementConfig): DiffResult {\n    const patches: DOMPatch[] = [];\n    \n    // Если типы элементов разные - полная замена\n    if (this.isDifferentType(oldConfig, newConfig)) {\n      patches.push({\n        type: 'REPLACE',\n        oldConfig,\n        newConfig\n      });\n      return { patches };\n    }\n    \n    // Сравнение свойств\n    const propPatches = this.diffProps(oldConfig.props, newConfig.props);\n    if (propPatches.length > 0) {\n      patches.push({\n        type: 'PROPS',\n        props: this.mergeProps(propPatches)\n      });\n    }\n    \n    // Сравнение дочерних элементов\n    const childPatches = this.diffChildren(\n      oldConfig.children || [], \n      newConfig.children || []\n    );\n    patches.push(...childPatches);\n    \n    return { patches };\n  }\n  \n  /**\n   * Проверка, являются ли элементы разными типами\n   */\n  private isDifferentType(oldConfig: ElementConfig, newConfig: ElementConfig): boolean {\n    // Сравниваем теги\n    if (oldConfig.tag !== newConfig.tag) {\n      return true;\n    }\n    \n    // Сравниваем компоненты\n    if (oldConfig.component !== newConfig.component) {\n      return true;\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Сравнение свойств элементов\n   */\n  private diffProps(oldProps: any = {}, newProps: any = {}): Array<{key: string, type: 'add' | 'update' | 'remove', value?: any}> {\n    const patches: Array<{key: string, type: 'add' | 'update' | 'remove', value?: any}> = [];\n    const allKeys = new Set([...Object.keys(oldProps), ...Object.keys(newProps)]);\n    \n    for (const key of allKeys) {\n      const oldValue = oldProps[key];\n      const newValue = newProps[key];\n      \n      if (!(key in oldProps)) {\n        // Новое свойство\n        patches.push({ key, type: 'add', value: newValue });\n      } else if (!(key in newProps)) {\n        // Удаленное свойство\n        patches.push({ key, type: 'remove' });\n      } else if (!this.isEqual(oldValue, newValue)) {\n        // Измененное свойство\n        patches.push({ key, type: 'update', value: newValue });\n      }\n    }\n    \n    return patches;\n  }\n  \n  /**\n   * Сравнение дочерних элементов с поддержкой ключей\n   */\n  private diffChildren(oldChildren: ElementChild[], newChildren: ElementChild[]): DOMPatch[] {\n    const patches: DOMPatch[] = [];\n    \n    // Если есть ключи, используем оптимизированный алгоритм\n    if (this.hasKeys(oldChildren) || this.hasKeys(newChildren)) {\n      return this.diffChildrenWithKeys(oldChildren, newChildren);\n    }\n    \n    // Простое сравнение по позициям\n    const maxLength = Math.max(oldChildren.length, newChildren.length);\n    \n    for (let i = 0; i < maxLength; i++) {\n      const oldChild = oldChildren[i];\n      const newChild = newChildren[i];\n      \n      if (!oldChild && newChild) {\n        // Добавление нового элемента\n        patches.push({\n          type: 'ADD',\n          index: i,\n          newConfig: typeof newChild === 'string' ? undefined : newChild,\n          text: typeof newChild === 'string' ? newChild : undefined\n        });\n      } else if (oldChild && !newChild) {\n        // Удаление элемента\n        patches.push({\n          type: 'REMOVE',\n          index: i\n        });\n      } else if (oldChild && newChild) {\n        // Сравнение существующих элементов\n        if (typeof oldChild === 'string' && typeof newChild === 'string') {\n          if (oldChild !== newChild) {\n            patches.push({\n              type: 'TEXT_UPDATE',\n              index: i,\n              text: newChild\n            });\n          }\n        } else if (typeof oldChild === 'object' && typeof newChild === 'object') {\n          const childDiff = this.diff(oldChild, newChild);\n          if (childDiff.patches.length > 0) {\n            patches.push({\n              type: 'UPDATE',\n              index: i,\n              patches: childDiff.patches\n            });\n          }\n        } else {\n          // Разные типы - замена\n          patches.push({\n            type: 'REPLACE',\n            index: i,\n            oldConfig: typeof oldChild === 'object' ? oldChild : undefined,\n            newConfig: typeof newChild === 'object' ? newChild : undefined,\n            text: typeof newChild === 'string' ? newChild : undefined\n          });\n        }\n      }\n    }\n    \n    return patches;\n  }\n  \n  /**\n   * Оптимизированное сравнение дочерних элементов с ключами\n   */\n  private diffChildrenWithKeys(oldChildren: ElementChild[], newChildren: ElementChild[]): DOMPatch[] {\n    const patches: DOMPatch[] = [];\n    \n    // Создаем карты ключей для быстрого поиска\n    const oldKeyMap = this.createKeyMap(oldChildren);\n    const newKeyMap = this.createKeyMap(newChildren);\n    \n    // Отслеживаем обработанные элементы\n    const processedOldIndices = new Set<number>();\n    const processedNewIndices = new Set<number>();\n    \n    // Проходим по новым элементам\n    newChildren.forEach((newChild, newIndex) => {\n      const newKey = this.getKey(newChild, newIndex);\n      const oldIndex = oldKeyMap.get(newKey);\n      \n      if (oldIndex !== undefined) {\n        // Элемент существовал\n        const oldChild = oldChildren[oldIndex];\n        processedOldIndices.add(oldIndex);\n        processedNewIndices.add(newIndex);\n        \n        // Проверяем, нужно ли переместить\n        if (oldIndex !== newIndex) {\n          patches.push({\n            type: 'MOVE',\n            index: oldIndex,\n            newIndex: newIndex\n          });\n        }\n        \n        // Сравниваем содержимое\n        if (typeof oldChild === 'object' && typeof newChild === 'object') {\n          const childDiff = this.diff(oldChild, newChild);\n          if (childDiff.patches.length > 0) {\n            patches.push({\n              type: 'UPDATE',\n              index: newIndex,\n              patches: childDiff.patches\n            });\n          }\n        }\n      } else {\n        // Новый элемент\n        patches.push({\n          type: 'ADD',\n          index: newIndex,\n          newConfig: typeof newChild === 'object' ? newChild : undefined,\n          text: typeof newChild === 'string' ? newChild : undefined\n        });\n      }\n    });\n    \n    // Удаляем элементы, которых нет в новом списке\n    oldChildren.forEach((oldChild, oldIndex) => {\n      if (!processedOldIndices.has(oldIndex)) {\n        patches.push({\n          type: 'REMOVE',\n          index: oldIndex\n        });\n      }\n    });\n    \n    return patches;\n  }\n  \n  /**\n   * Создание карты ключей для быстрого поиска\n   */\n  private createKeyMap(children: ElementChild[]): Map<string | number, number> {\n    const keyMap = new Map<string | number, number>();\n    \n    children.forEach((child, index) => {\n      const key = this.getKey(child, index);\n      keyMap.set(key, index);\n    });\n    \n    return keyMap;\n  }\n  \n  /**\n   * Получение ключа элемента\n   */\n  private getKey(child: ElementChild, fallbackIndex: number): string | number {\n    if (typeof child === 'object' && child.key !== undefined) {\n      return child.key;\n    }\n    return fallbackIndex;\n  }\n  \n  /**\n   * Проверка наличия ключей в списке дочерних элементов\n   */\n  private hasKeys(children: ElementChild[]): boolean {\n    return children.some(child => \n      typeof child === 'object' && child.key !== undefined\n    );\n  }\n  \n  /**\n   * Объединение патчей для свойств\n   */\n  private mergeProps(propPatches: Array<{key: string, type: 'add' | 'update' | 'remove', value?: any}>): Record<string, any> {\n    const result: Record<string, any> = {};\n    \n    propPatches.forEach(patch => {\n      if (patch.type === 'remove') {\n        result[patch.key] = null; // Помечаем для удаления\n      } else {\n        result[patch.key] = patch.value;\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Глубокое сравнение значений\n   */\n  private isEqual(value1: any, value2: any): boolean {\n    if (value1 === value2) {\n      return true;\n    }\n    \n    if (value1 == null || value2 == null) {\n      return value1 === value2;\n    }\n    \n    if (typeof value1 !== typeof value2) {\n      return false;\n    }\n    \n    if (typeof value1 === 'object') {\n      // Простое сравнение объектов (можно улучшить)\n      return JSON.stringify(value1) === JSON.stringify(value2);\n    }\n    \n    return false;\n  }\n}\n\n/**\n * Применение патчей к DOM элементу\n */\nexport class DOMPatcher {\n  /**\n   * Применение списка патчей к DOM элементу\n   */\n  patch(element: HTMLElement, patches: DOMPatch[]): HTMLElement {\n    let currentElement = element;\n    \n    patches.forEach(patch => {\n      currentElement = this.applyPatch(currentElement, patch);\n    });\n    \n    return currentElement;\n  }\n  \n  /**\n   * Применение одного патча\n   */\n  private applyPatch(element: HTMLElement, patch: DOMPatch): HTMLElement {\n    switch (patch.type) {\n      case 'REPLACE':\n        return this.replacePatch(element, patch);\n      case 'PROPS':\n        this.propsPatch(element, patch);\n        break;\n      case 'ADD':\n        this.addPatch(element, patch);\n        break;\n      case 'REMOVE':\n        this.removePatch(element, patch);\n        break;\n      case 'UPDATE':\n        this.updatePatch(element, patch);\n        break;\n      case 'TEXT_UPDATE':\n        this.textUpdatePatch(element, patch);\n        break;\n      case 'MOVE':\n        this.movePatch(element, patch);\n        break;\n    }\n    \n    return element;\n  }\n  \n  /**\n   * Полная замена элемента\n   */\n  private replacePatch(element: HTMLElement, patch: DOMPatch): HTMLElement {\n    if (!patch.newConfig) {\n      throw new Error('Новая конфигурация требуется для замены');\n    }\n    \n    // Здесь нужно создать новый элемент из конфигурации\n    // Это требует доступа к renderer'у\n    // Пока оставляем заглушку\n    console.warn('Замена элемента еще не реализована');\n    return element;\n  }\n  \n  /**\n   * Обновление свойств элемента\n   */\n  private propsPatch(element: HTMLElement, patch: DOMPatch): void {\n    if (!patch.props) return;\n    \n    Object.entries(patch.props).forEach(([key, value]) => {\n      if (value === null) {\n        // Удаление свойства\n        element.removeAttribute(key);\n      } else {\n        // Установка/обновление свойства\n        if (key === 'style' && typeof value === 'object') {\n          this.updateStyles(element, value);\n        } else if (key === 'class') {\n          element.className = value;\n        } else {\n          element.setAttribute(key, String(value));\n        }\n      }\n    });\n  }\n  \n  /**\n   * Добавление нового дочернего элемента\n   */\n  private addPatch(element: HTMLElement, patch: DOMPatch): void {\n    const index = patch.index || element.children.length;\n    \n    if (patch.text !== undefined) {\n      // Текстовый узел\n      const textNode = document.createTextNode(patch.text);\n      if (index >= element.children.length) {\n        element.appendChild(textNode);\n      } else {\n        element.insertBefore(textNode, element.children[index]);\n      }\n    } else if (patch.newConfig) {\n      // Новый элемент из конфигурации\n      // Требует доступа к renderer'у\n      console.warn('Добавление элемента из конфигурации еще не реализовано');\n    }\n  }\n  \n  /**\n   * Удаление дочернего элемента\n   */\n  private removePatch(element: HTMLElement, patch: DOMPatch): void {\n    const index = patch.index;\n    if (index !== undefined && index < element.children.length) {\n      const child = element.children[index];\n      element.removeChild(child);\n    }\n  }\n  \n  /**\n   * Обновление дочернего элемента\n   */\n  private updatePatch(element: HTMLElement, patch: DOMPatch): void {\n    const index = patch.index;\n    if (index !== undefined && index < element.children.length && patch.patches) {\n      const child = element.children[index] as HTMLElement;\n      this.patch(child, patch.patches);\n    }\n  }\n  \n  /**\n   * Обновление текста\n   */\n  private textUpdatePatch(element: HTMLElement, patch: DOMPatch): void {\n    const index = patch.index;\n    if (index !== undefined && patch.text !== undefined) {\n      const child = element.childNodes[index];\n      if (child && child.nodeType === Node.TEXT_NODE) {\n        child.textContent = patch.text;\n      }\n    }\n  }\n  \n  /**\n   * Перемещение элемента\n   */\n  private movePatch(element: HTMLElement, patch: DOMPatch): void {\n    const oldIndex = patch.index;\n    const newIndex = patch.newIndex;\n    \n    if (oldIndex !== undefined && newIndex !== undefined) {\n      const child = element.children[oldIndex];\n      const target = element.children[newIndex];\n      \n      if (child) {\n        if (target) {\n          element.insertBefore(child, target);\n        } else {\n          element.appendChild(child);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Обновление стилей элемента\n   */\n  private updateStyles(element: HTMLElement, styles: Record<string, any>): void {\n    Object.entries(styles).forEach(([property, value]) => {\n      if (value === null || value === undefined) {\n        element.style.removeProperty(property);\n      } else {\n        element.style.setProperty(property, String(value));\n      }\n    });\n  }\n}\n\n/**\n * Глобальные экземпляры для удобства\n */\nexport const domDiffer = new DOMDiffer();\nexport const domPatcher = new DOMPatcher();","import { ElementConfig } from '../core/types';\n\n/**\n * Утилиты для работы с элементами\n */\n\n/**\n * Создание простого элемента с минимальной конфигурацией\n */\nexport function createElement(tag: string, props?: any, children?: any[]): ElementConfig {\n  const config: ElementConfig = {\n    tag,\n    props\n  };\n  \n  if (children !== undefined) {\n    config.children = children;\n  }\n  \n  return config;\n}\n\n/**\n * Проверка валидности HTML тега\n */\nexport function isValidHtmlTag(tag: string): boolean {\n  const validTags = [\n    'div', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n    'button', 'input', 'form', 'label', 'textarea', 'select', 'option',\n    'a', 'img', 'ul', 'ol', 'li', 'table', 'tr', 'td', 'th',\n    'header', 'footer', 'main', 'section', 'article', 'nav',\n    'strong', 'em', 'small', 'br', 'hr'\n  ];\n  return validTags.includes(tag.toLowerCase());\n}\n\n/**\n * Преобразование camelCase в kebab-case\n */\nexport function camelToKebab(str: string): string {\n  return str.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\n\n/**\n * Escape HTML специальных символов\n */\nexport function escapeHtml(text: string): string {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n/**\n * Проверка является ли объект ElementConfig\n */\nexport function isElementConfig(obj: any): obj is ElementConfig {\n  return obj && typeof obj === 'object' && typeof obj.tag === 'string';\n}\n\n/**\n * Глубокое клонирование конфигурации\n */\nexport function cloneConfig(config: ElementConfig): ElementConfig {\n  return JSON.parse(JSON.stringify(config));\n}\n\n/**\n * Создание текстового узла\n */\nexport function createTextNode(text: string): string {\n  return String(text);\n}\n\n/**\n * Объединение CSS классов\n */\nexport function combineClasses(...classes: (string | undefined | null)[]): string {\n  return classes.filter(Boolean).join(' ');\n}\n\n/**\n * Преобразование объекта стилей в CSS строку\n */\nexport function stylesToString(styles: Record<string, string | number>): string {\n  return Object.entries(styles)\n    .map(([key, value]) => `${camelToKebab(key)}: ${value}`)\n    .join('; ');\n}","// Основные классы\nexport { ConfigValidator } from './core/validator';\nexport { HTMLRenderer } from './core/renderer';\nexport { ComponentRenderer } from './core/component-renderer';\nexport { componentRegistry, registerComponent, getComponent, createComponentInstance } from './core/component-registry';\n\n// Реактивность\nexport { \n  createReactive, \n  effect, \n  stop, \n  isReactive, \n  toRaw, \n  shallowReactive,\n  pauseTracking,\n  enableTracking\n} from './core/reactive';\n\n// Computed свойства\nexport {\n  computed,\n  isComputedRef,\n  useComputed,\n  memo,\n  createComponentComputed,\n  computedManager\n} from './core/computed';\n\n// Система плагинов\nexport {\n  PluginManager,\n  definePlugin,\n  LifecycleLoggerPlugin,\n  FormValidationPlugin,\n  I18nPlugin,\n  StorePlugin\n} from './core/plugin-system';\n\n// Планировщик\nexport { \n  scheduler, \n  nextTick, \n  flushSync, \n  scheduleUpdate,\n  PriorityScheduler \n} from './core/scheduler';\n\n// Директивы\nexport { \n  directiveManager,\n  IfDirective,\n  ForDirective, \n  ShowDirective,\n  ModelDirective\n} from './core/directives';\n\n// Оптимизация производительности\nexport {\n  memoize,\n  debounce,\n  throttle,\n  ComponentOptimizer,\n  DOMOptimizer,\n  MemoryManager,\n  PerformanceAnalyzer\n} from './core/performance';\n\n// DOM Diffing\nexport { domDiffer, domPatcher, DOMDiffer, DOMPatcher } from './core/dom-differ';\n\n// Типы\nexport type { \n  ElementConfig, \n  ElementProps, \n  StyleProperties, \n  ElementChild, \n  EventHandlers,\n  ValidationResult,\n  ValidationError,\n  RenderContext,\n  EventListenerRecord,\n  RendererOptions,\n  RenderStats,\n  \n  // Компонентная система\n  Component,\n  ComponentProps,\n  PropDefinition,\n  ComponentInstance,\n  \n  // Реактивность\n  ReactiveEffect,\n  EffectOptions,\n  ReactiveProperty,\n  ReactiveOptions,\n  DebuggerEvent,\n  \n  // DOM Diffing\n  PatchType,\n  DOMPatch,\n  DiffResult,\n  \n  // Директивы\n  DirectiveContext,\n  \n  // Computed свойства\n  ComputedRef,\n  ComputedOptions,\n  \n  // Система плагинов\n  Plugin,\n  PluginOptions,\n  PluginContext,\n  CustomDirective,\n  DirectiveBinding\n} from './core/types';\n\n// Утилиты\nexport { \n  createElement, \n  isValidHtmlTag, \n  camelToKebab,\n  escapeHtml,\n  isElementConfig,\n  cloneConfig,\n  createTextNode,\n  combineClasses,\n  stylesToString\n} from './utils/helpers';\n\nimport { ConfigValidator } from './core/validator';\nimport { ComponentRenderer } from './core/component-renderer';\nimport { ElementConfig, RendererOptions, Component, Plugin, PluginOptions, CustomDirective } from './core/types';\nimport { createReactive } from './core/reactive';\nimport { registerComponent } from './core/component-registry';\nimport { nextTick } from './core/scheduler';\nimport { computed } from './core/computed';\nimport { PluginManager } from './core/plugin-system';\n\n/**\n * Основной класс JS фреймворка с поддержкой компонентов, реактивности, плагинов и computed свойств\n */\nexport class JSFramework {\n  private renderer: ComponentRenderer;\n  private validator: ConfigValidator;\n  private mountedElement: HTMLElement | null;\n  private globalState: any;\n  private pluginManager: PluginManager;\n\n  constructor(options?: RendererOptions) {\n    this.renderer = new ComponentRenderer();\n    this.validator = new ConfigValidator();\n    this.mountedElement = null;\n    this.globalState = createReactive({});\n    this.pluginManager = new PluginManager(this);\n  }\n\n  /**\n   * Регистрация компонента в фреймворке\n   */\n  registerComponent(component: Component): void {\n    registerComponent(component);\n  }\n\n  /**\n   * Создание реактивного состояния\n   */\n  reactive<T extends object>(target: T): T {\n    return createReactive(target);\n  }\n\n  /**\n   * Получение глобального состояния\n   */\n  getGlobalState(): any {\n    return this.globalState;\n  }\n\n  /**\n   * Ожидание следующего обновления\n   */\n  nextTick(): Promise<void> {\n    return nextTick();\n  }\n\n  /**\n   * Создание computed свойства\n   */\n  computed<T>(getter: () => T): any {\n    return computed(getter);\n  }\n\n  /**\n   * Установка плагина\n   */\n  use(plugin: Plugin, options?: PluginOptions): this {\n    this.pluginManager.use(plugin, options);\n    return this;\n  }\n\n  /**\n   * Регистрация пользовательской директивы\n   */\n  directive(directive: CustomDirective): this {\n    this.pluginManager.registerDirective(directive);\n    return this;\n  }\n\n  /**\n   * Добавление глобального свойства\n   */\n  config(name: string, value: any): this {\n    this.pluginManager.addGlobalProperty(name, value);\n    return this;\n  }\n\n  /**\n   * Получение установленных плагинов\n   */\n  getInstalledPlugins(): string[] {\n    return this.pluginManager.getInstalledPlugins();\n  }\n\n  /**\n   * Рендеринг конфигурации в указанный контейнер\n   */\n  render(config: ElementConfig, container: HTMLElement | string): HTMLElement {\n    const containerElement = typeof container === 'string' \n      ? document.querySelector(container) as HTMLElement\n      : container;\n\n    if (!containerElement) {\n      throw new Error('Контейнер не найден');\n    }\n\n    // Валидация конфигурации\n    const validationResult = this.validator.validate(config);\n    if (!validationResult.isValid) {\n      const errorMessages = validationResult.errors.map(e => e.message).join(', ');\n      throw new Error(`Ошибка валидации: ${errorMessages}`);\n    }\n\n    // Размонтируем предыдущий элемент\n    if (this.mountedElement) {\n      this.unmount();\n    }\n\n    // Рендеринг с поддержкой компонентов\n    const element = this.renderer.render(config, containerElement);\n    this.mountedElement = element;\n\n    return element;\n  }\n\n  /**\n   * Размонтирование текущего элемента\n   */\n  unmount(): void {\n    if (this.mountedElement) {\n      this.renderer.unmount(this.mountedElement);\n      this.mountedElement = null;\n    }\n  }\n\n  /**\n   * Обновление текущего элемента новой конфигурацией\n   */\n  update(newConfig: ElementConfig): HTMLElement {\n    if (!this.mountedElement) {\n      throw new Error('Нет смонтированного элемента для обновления');\n    }\n\n    // Валидация новой конфигурации\n    const validationResult = this.validator.validate(newConfig);\n    if (!validationResult.isValid) {\n      const errorMessages = validationResult.errors.map(e => e.message).join(', ');\n      throw new Error(`Ошибка валидации: ${errorMessages}`);\n    }\n\n    // Обновление с поддержкой компонентов\n    const newElement = this.renderer.updateElement(this.mountedElement, newConfig);\n    this.mountedElement = newElement;\n\n    return newElement;\n  }\n\n  /**\n   * Получение статистики рендеринга\n   */\n  getStats() {\n    return this.renderer.getStats();\n  }\n\n  /**\n   * Поиск элемента по ID\n   */\n  findById(id: string): HTMLElement | null {\n    if (!this.mountedElement) {\n      return null;\n    }\n    return this.renderer.findElementById(this.mountedElement, id);\n  }\n\n  /**\n   * Поиск элементов по классу\n   */\n  findByClass(className: string): HTMLElement[] {\n    if (!this.mountedElement) {\n      return [];\n    }\n    return this.renderer.findElementsByClass(this.mountedElement, className);\n  }\n\n  /**\n   * Очистка всех ресурсов фреймворка включая плагины\n   */\n  cleanup(): void {\n    this.unmount();\n    this.renderer.cleanup();\n    this.validator.reset();\n    this.pluginManager.cleanup();\n  }\n\n  /**\n   * Получение текущего смонтированного элемента\n   */\n  getMountedElement(): HTMLElement | null {\n    return this.mountedElement;\n  }\n}\n\n// Создание глобального экземпляра для удобства\nexport const Framework = new JSFramework();\n\n// Экспорт по умолчанию\nexport default Framework;"],"names":["effect","runEffect","_ModelDirective","scheduler","ComponentRenderer","ConfigValidator","createReactive","PluginManager","registerComponent","nextTick","computed"],"mappings":"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"}