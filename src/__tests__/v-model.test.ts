import { Framework } from '../index';\nimport { ModelDirective } from '../core/directives';\nimport { DirectiveContext } from '../core/types';\n\ndescribe('v-model директива', () => {\n  let container: HTMLElement;\n  let directive: ModelDirective;\n  let mockContext: DirectiveContext;\n\n  beforeEach(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n    directive = new ModelDirective();\n    \n    mockContext = {\n      state: Framework.reactive({ \n        inputValue: 'test',\n        isChecked: false,\n        selectedValue: 'option1'\n      }),\n      props: {},\n      instance: undefined\n    };\n  });\n\n  afterEach(() => {\n    document.body.removeChild(container);\n    Framework.cleanup();\n  });\n\n  describe('Текстовые поля', () => {\n    test('должна устанавливать значение input элемента', () => {\n      const config = {\n        tag: 'input',\n        props: { type: 'text' },\n        model: 'inputValue'\n      };\n\n      const result = directive.process(config, mockContext);\n      \n      expect(result.props.value).toBe('test');\n      expect(result.events.input).toBeDefined();\n    });\n\n    test('должна обновлять состояние при изменении input', () => {\n      const config = {\n        tag: 'input', \n        props: { type: 'text' },\n        model: 'inputValue'\n      };\n\n      const result = directive.process(config, mockContext);\n      \n      // Симулируем событие input\n      const mockEvent = {\n        target: { value: 'new value' }\n      } as any;\n\n      result.events.input(mockEvent);\n      \n      expect(mockContext.state.inputValue).toBe('new value');\n    });\n  });\n\n  describe('Чекбоксы', () => {\n    test('должна устанавливать checked свойство', () => {\n      const config = {\n        tag: 'input',\n        props: { type: 'checkbox' },\n        model: 'isChecked'\n      };\n\n      const result = directive.process(config, mockContext);\n      \n      expect(result.props.checked).toBe(false);\n      expect(result.events.change).toBeDefined();\n    });\n\n    test('должна обновлять состояние при изменении checkbox', () => {\n      const config = {\n        tag: 'input',\n        props: { type: 'checkbox' },\n        model: 'isChecked'\n      };\n\n      const result = directive.process(config, mockContext);\n      \n      const mockEvent = {\n        target: { checked: true }\n      } as any;\n\n      result.events.change(mockEvent);\n      \n      expect(mockContext.state.isChecked).toBe(true);\n    });\n  });\n\n  describe('Select элементы', () => {\n    test('должна устанавливать значение select элемента', () => {\n      const config = {\n        tag: 'select',\n        model: 'selectedValue'\n      };\n\n      const result = directive.process(config, mockContext);\n      \n      expect(result.props.value).toBe('option1');\n      expect(result.events.change).toBeDefined();\n    });\n\n    test('должна обновлять состояние при изменении select', () => {\n      const config = {\n        tag: 'select',\n        model: 'selectedValue'\n      };\n\n      const result = directive.process(config, mockContext);\n      \n      const mockEvent = {\n        target: { value: 'option2' }\n      } as any;\n\n      result.events.change(mockEvent);\n      \n      expect(mockContext.state.selectedValue).toBe('option2');\n    });\n  });\n\n  describe('Вложенные свойства', () => {\n    test('должна работать с вложенными объектами', () => {\n      mockContext.state.user = Framework.reactive({ name: 'John' });\n      \n      const config = {\n        tag: 'input',\n        props: { type: 'text' },\n        model: 'user.name'\n      };\n\n      const result = directive.process(config, mockContext);\n      \n      expect(result.props.value).toBe('John');\n      \n      const mockEvent = {\n        target: { value: 'Jane' }\n      } as any;\n\n      result.events.input(mockEvent);\n      \n      expect(mockContext.state.user.name).toBe('Jane');\n    });\n  });\n\n  describe('Интеграционный тест', () => {\n    test('должна работать в полном цикле рендеринга', () => {\n      const TestComponent = {\n        name: 'TestComponent',\n        \n        state: () => ({\n          message: 'Hello World'\n        }),\n        \n        render(props, state) {\n          return {\n            tag: 'div',\n            children: [\n              {\n                tag: 'input',\n                props: { type: 'text', id: 'test-input' },\n                model: 'message'\n              },\n              {\n                tag: 'p',\n                children: [state.message]\n              }\n            ]\n          };\n        }\n      };\n\n      Framework.registerComponent(TestComponent);\n      \n      const element = Framework.render({\n        component: 'TestComponent'\n      }, container);\n\n      const input = element.querySelector('#test-input') as HTMLInputElement;\n      const paragraph = element.querySelector('p') as HTMLElement;\n      \n      expect(input.value).toBe('Hello World');\n      expect(paragraph.textContent).toBe('Hello World');\n      \n      // Симулируем ввод пользователя\n      input.value = 'Updated message';\n      input.dispatchEvent(new Event('input', { bubbles: true }));\n      \n      // Проверяем, что состояние обновилось\n      setTimeout(() => {\n        expect(paragraph.textContent).toBe('Updated message');\n      }, 0);\n    });\n  });\n});"
</invoke>